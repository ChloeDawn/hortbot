name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  GO_DEV_VERSION: "1.17" # Sync with README, go.mod, Dockerfile, and docker-compose.yml.
  GOLANGCI_LINT_VERSION: "v1.41.1"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # https://github.com/actions/toolkit/issues/399
        # go: ["1.16", "tip"]
        go: ["1.17"]
    name: Go ${{ matrix.go }}

    steps:
      - uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}

      - name: Install Go
        if: matrix.go != 'tip'
        uses: actions/setup-go@v2
        with:
          stable: "false"
          go-version: ${{ matrix.go }}

      - name: Install Go tip
        if: matrix.go == 'tip'
        run: |
          git clone --depth=1 https://go.googlesource.com/go $HOME/gotip
          cd $HOME/gotip/src
          ./make.bash
          ../bin/go version
          echo "::set-env name=GOROOT::$HOME/gotip"
          echo "::add-path::$HOME/gotip/bin"

      - name: Download Go modules
        run: go mod download

      - name: Pull docker images
        run: |
          docker pull zikaeroh/postgres-initialized
          docker pull nsqio/nsq

      - name: Run tests
        run: go test -race -covermode=atomic -coverprofile=coverage.txt ./...

      - name: Run 1x benchmarks
        run: go test -run=- -bench . -benchtime=1x ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          name: Go ${{ matrix.go }}

  style:
    name: Style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_DEV_VERSION }}-${{ hashFiles('**/go.sum') }}

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          stable: "false"
          go-version: ${{ env.GO_DEV_VERSION }}

      - name: Check go.mod tidyness
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          skip-pkg-cache: true
          args: --timeout=10m

  generate:
    name: go generate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_DEV_VERSION }}-${{ hashFiles('**/go.sum') }}

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          stable: "false"
          go-version: ${{ env.GO_DEV_VERSION }}

      - name: go generate
        run: |
          go generate ./...
          git diff --exit-code

      - name: genmodels
        run: |
          go run ./internal/cmd/genmodels
          git diff --exit-code

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [test, style, generate]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get version
        run: |
          export HB_VERSION="r$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
          echo Version $HB_VERSION
          echo HB_VERSION=$HB_VERSION >> $GITHUB_ENV

      - name: Turnstyle
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build / push image
        uses: whoan/docker-build-with-cache-action@v4
        with:
          username: "${{ secrets.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
          image_name: hortbot/hortbot
          image_tag: "latest,${{ env.HB_VERSION }}"
          build_extra_args: "--build-arg=version=${{ env.HB_VERSION }}"
          push_image_and_stages: ${{ github.repository == 'hortbot/hortbot' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Push image to GitHub
        if: ${{ github.repository == 'hortbot/hortbot' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker tag hortbot/hortbot:latest ghcr.io/hortbot/hortbot:latest
          docker tag hortbot/hortbot:${{ env.HB_VERSION }} ghcr.io/hortbot/hortbot:${{ env.HB_VERSION }}
          docker push ghcr.io/hortbot/hortbot:latest
          docker push ghcr.io/hortbot/hortbot:${{ env.HB_VERSION }}
