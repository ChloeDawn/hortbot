// Code generated by counterfeiter. DO NOT EDIT.
package botfakes

import (
	"sync"

	"github.com/hortbot/hortbot/internal/bot"
)

type FakeRand struct {
	Float64Stub        func() float64
	float64Mutex       sync.RWMutex
	float64ArgsForCall []struct {
	}
	float64Returns struct {
		result1 float64
	}
	float64ReturnsOnCall map[int]struct {
		result1 float64
	}
	IntnStub        func(int) int
	intnMutex       sync.RWMutex
	intnArgsForCall []struct {
		arg1 int
	}
	intnReturns struct {
		result1 int
	}
	intnReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRand) Float64() float64 {
	fake.float64Mutex.Lock()
	ret, specificReturn := fake.float64ReturnsOnCall[len(fake.float64ArgsForCall)]
	fake.float64ArgsForCall = append(fake.float64ArgsForCall, struct {
	}{})
	stub := fake.Float64Stub
	fakeReturns := fake.float64Returns
	fake.recordInvocation("Float64", []interface{}{})
	fake.float64Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRand) Float64CallCount() int {
	fake.float64Mutex.RLock()
	defer fake.float64Mutex.RUnlock()
	return len(fake.float64ArgsForCall)
}

func (fake *FakeRand) Float64Calls(stub func() float64) {
	fake.float64Mutex.Lock()
	defer fake.float64Mutex.Unlock()
	fake.Float64Stub = stub
}

func (fake *FakeRand) Float64Returns(result1 float64) {
	fake.float64Mutex.Lock()
	defer fake.float64Mutex.Unlock()
	fake.Float64Stub = nil
	fake.float64Returns = struct {
		result1 float64
	}{result1}
}

func (fake *FakeRand) Float64ReturnsOnCall(i int, result1 float64) {
	fake.float64Mutex.Lock()
	defer fake.float64Mutex.Unlock()
	fake.Float64Stub = nil
	if fake.float64ReturnsOnCall == nil {
		fake.float64ReturnsOnCall = make(map[int]struct {
			result1 float64
		})
	}
	fake.float64ReturnsOnCall[i] = struct {
		result1 float64
	}{result1}
}

func (fake *FakeRand) Intn(arg1 int) int {
	fake.intnMutex.Lock()
	ret, specificReturn := fake.intnReturnsOnCall[len(fake.intnArgsForCall)]
	fake.intnArgsForCall = append(fake.intnArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.IntnStub
	fakeReturns := fake.intnReturns
	fake.recordInvocation("Intn", []interface{}{arg1})
	fake.intnMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRand) IntnCallCount() int {
	fake.intnMutex.RLock()
	defer fake.intnMutex.RUnlock()
	return len(fake.intnArgsForCall)
}

func (fake *FakeRand) IntnCalls(stub func(int) int) {
	fake.intnMutex.Lock()
	defer fake.intnMutex.Unlock()
	fake.IntnStub = stub
}

func (fake *FakeRand) IntnArgsForCall(i int) int {
	fake.intnMutex.RLock()
	defer fake.intnMutex.RUnlock()
	argsForCall := fake.intnArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRand) IntnReturns(result1 int) {
	fake.intnMutex.Lock()
	defer fake.intnMutex.Unlock()
	fake.IntnStub = nil
	fake.intnReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRand) IntnReturnsOnCall(i int, result1 int) {
	fake.intnMutex.Lock()
	defer fake.intnMutex.Unlock()
	fake.IntnStub = nil
	if fake.intnReturnsOnCall == nil {
		fake.intnReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.intnReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRand) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.float64Mutex.RLock()
	defer fake.float64Mutex.RUnlock()
	fake.intnMutex.RLock()
	defer fake.intnMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRand) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bot.Rand = new(FakeRand)
