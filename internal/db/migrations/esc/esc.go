// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    359,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5TQy6rCMBDG8X2eIu/RVS85h4C1xXahqzJOBlqYJDWXPr9rEYnuf/9h+Br1r8+VEN1l
GOVcNycl9Z9UVz3NkzwgbHBnirKtp7bu1CcIOflAO29lGnElk5nMgt5acKZYBNoJ0g/BI/tUfgRzTN5+
fRRXcI743d3GlyUQKcaF6SCuhGiHvtdzJZ4BAAD//7lUCDNnAQAA
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    5514,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xY32/bNhB+919xb0mApEifgw1wErYzmiid66ALhoGgxJPMjT80knLsDfvfB+qHrchU
nA4tsCF7jO6773i8j3fnnJ3BYikc5EIiCAeuSn/FzIM3kC2ZLhAq7YUEv0TIhXUeLDIJHEtpNgq1B5PX
xtT4N5OzM7g2oE1AyQ0YHUwOwWVLVAyUKCzzwmgHFhUTWugCMqOdcD5QdaGEC0wKnWMFwpI5SBF18DEr
5G8mk0vyfpZcTCZXczJdEFg8fCTAsgydoxJXKGH6CUhyfwvHEwCAI1yh3RiNR6fN365KXWZFirb7ogxH
y7zZfkitYTxjzu8wjCuhjyYnvcDTyxtSX5RG6dpogkMqCqE9vCcJmU8X5BouH+CavJve3yzC0WbXJFnM
Fg/wcT67nc4f4AN5aGJkFplHTpkHLxQ6z1Tp/9j6Jnefj08guVtAcn9z07hUJf8Sl8bHoaW7c3ZWuE9m
P96ThlczheBx7QfxUuPpmI1lXqyCFoxEpgfG0mIu1lHKSkr0taU9oCi0scjrTz//sk3m6M+/jga+WeW8
UdQ8arTu5Xhl+BegLRaVZAf5GxdjJDePGoT2DYlkztPMKMX0XpkGzjU0V7FLKpl1SDem8lU6dsW49pZR
KXIM1e2XtrFblucSKWqWSuQRkhrllqaSnLZPYiwWF66UbEMfmQ3v2I0dqY51CBWuxFSe8qppEJGzt0S5
kD5UeuTsjZlKoX8bi1WiVcKHJ9OgXlDTljVj5RhpD0GV0DRbBrnsZ9HHlWgz1D70uOeBNWGI/RTWx6Ey
Hg8crsFQxdbj8VqME7qQeOCS3UalRh4I2oJelGyHDfl25OMpK3w+smJrKlEXfvkMSRpaN6fl0jJ36P6e
YmnJvEerXySgqx/I1Qc4Hqn+JVl8JiSBc2Caw9vz85PTiFfkJg847r2q77+D85P+AJsl1+Sn7QCj7Vyg
gq/D8N4NttawP/qa/tg2t//QBGxT6w3BOXlH5iS5Ip96eQu+5zk2+7p1JToWe6vJkz8G08ZU2g+Hcnfg
cC/GxuiRi4ilNjUDHY536Z7WCcRE8LSUdOdSy+Eu2S/2DnJy8TxZiLlV1ZCmPtBQWb9XdUN7DYKqVKQl
1vlHa/oVlVCpiBCam4/UvyvJeNlbV12prtidTwg1LLHFsinNK2kfvYWy2wbj/sMH0qfZ7ui9pYiPrWgo
2SairbZVUS7yvIvfpft2gG2X16/WmPb1tieDiPQiUhlXYYRweOvP8Q6xe7oNv2Z5Jf8X7jcTbmaNprgu
LToX9pbxcfsv0fC+JCIijulmXMUxyjEZR5kP6phV3lgspXjNc9ZbURQYLb2xoui2/PafE/WPaHSl0S66
6TUi+7brW3Ro92oZUd6TSo9Lrk/SzfChd2yQr5gV4Tm/6v1/xWSF/2QJv7u9nS0uJn8HAAD///cncoaK
FQAA
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
