// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    359,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5TQSwrCMBDG8X1OkXt01UeUgLXFdqGrMiYDDUwe5tHzuxaR1v3vPwxfI87yWjHW3YaR
z3VzEVyeuLjLaZ74BtHAkzDxtp7auhO/IJTsIwYy+zSpFXUh1Ivy1oLTu0XEgJD/CF7F5wOPGBsIDx9V
KziH9O0e48cSSmFKC+GGVDHWDn0v54q9AwAA//8N4n1HZwEAAA==
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    5514,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xYXW/bNhR996+4b0mApEifgw1wErYzmiid66ALhoGgxGuZGz80knLsDfvvA/URKxJl
p0MLbMgeLZ57Li/vIc9Nzs5gsRIOlkIiCAeuTH/FzIM3kK2YzhFK7YUEv0JYCus8WGQSOBbSbBVqD2ZZ
LabGv5mcncG1AW0CSm7B6LDkEFy2QsVAidwyL4x2YFExoYXOITPaCecDVZtKuMCk0DmWI6yYgxRRhxiz
Rv5mMrkk72fJxWRyNSfTBYHFw0cCLMvQOSpxjRKmn4Ak97dwPAEAOMI12q3ReHRa/3Zl6jIrUrTtF2U4
WubN04fUGsYz5vwOw7gS+mhy0kk8vbwh1UFplK7JJjikIhfaw3uSkPl0Qa7h8gGuybvp/c0ibG12TZLF
bPEAH+ez2+n8AT6QhzpHZpF55JR58EKh80wV/o+n2OTu8/EJJHcLSO5vbuqQsuBfElLHOLR0t892Fe6T
2Y/3pObVTCF43PhevtR4OrbGMi/WQQtGItO9xcLiUmyilKWU6KuVZoMi18Yirz79/MtTMUd//nXUi81K
542i5lGjdS/HK8O/AG0xLyU7yF+HGCO5edQgtK9JJHOeZkYppgdt6gVX0KWKHVLBrEO6NaUv07Ejxo23
jEqxxNDdbmvrdcuWS4kUNUsl8ghJhXIrU0pOmysxlosLV0i2pY/MhnvsxrZU5TqECkdiSk95WT8Qkb03
REshfej0yN7rZSqF/m0sV4FWCR+uTI16QU8b1owVY6QdBFVC02wV5DKsoosr0GaofXjj9gMrwpD7OayL
Q2U8HthcjaGKbcbzNRgndC7xwCG7rUqNPJC0Ab2o2BYb6m3Jx0tWuD+zYhsqUed+tYckDU83p8XKMnfo
/J5jacG8R6tfJKCrH8jVBzge6f4lWXwmJIFzYJrD2/Pzk9NIVOQkDwQObtX338H5SdfAZsk1+enJwGjj
C1TwTTDvnbE1CwPrc0IVEtvH7T/kgE1pHROck3dkTpIr8qlTt+CDyDHva8eVqC12RpNnP3puY0rt+6bc
bjici7ExeuQislIt1YYOx7tyT6sCIiLotZLuQio53CXDZu8gJxf7yULOVlUDmmpDfWX9XlYP2msQVKki
T2JVf7SnX1EJpYoIoT75SP/bloy3vQnVpWqb3caEVP0WWyzq1ryS56OarZ6JPx4/uCBdmqcZvTMU8bER
DSXbRrTVPFWUi+Wyzd+W+7aHbYbXr/YwDfU2kEFEehGpjKtwSDg49T28A+zQ9LIV8lL+L9xvJtzMGk1x
U1h0Lswt43b7L9HwUBIx/4zoZo+FDilHZRxjPqxjVnpjsZDiNfustyLPMdp6Y0XeTvnNPyeqP6LRFUa7
6KRXi+zbjm9R0+70MqK8Z50el1yXpPXwfnTMyNfMinCdX/X8v2ayxH8yhN/d3s4WF5O/AwAA//9kTu4o
ihUAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
