// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    318,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5SQvQrDIBRGd5/C93AyxhahaUJ1aKcgeiGB60+j9vk7l1Ka7Od8fJxOntWVEdLfxoka
3l0kVScq70obTW2raYOMKxQquBa8l7/Q4hbwDcHPLoVgo/9rbJDB1gPCs6W648gaMsLuUbfYGAG/ucf0
UcI5KGVGeAEyQsQ4DMow8g4AAP//d8ml+j4BAAA=
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    4688,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xXTW/bRhC961fMzTZgB87ZJ9nepEJsOlUopEJREEvuiNp2P9j9cKwW/e/F8kOiyaXt
AAnQwjmK8+bN7szTG/LsDNItt7DhAoFbsD7/HQsHTkOxpapE8MpxAW6LsOHGOjBIBTCshN5JVA70pg7m
2r2ZnZ3BtQalA0rsQKsQsgi22KKkIHlpqONaWTAoKVdclVBoZbl1gaorxW1gkmgtLRG21EKOqEKOvkf2
Zja7JO8XycVsdrUk85RAuv5IgBYFWpsJvEcB809AktUtHM8AAI7wHs1OKzw6bX5bn9vC8BxN90RqhoY6
vX+QG01ZQa07YCiTXB3NTnqF55c3pG6UQmHbapxBzkuuHLwnCVnOU3INl2u4Ju/mq5s0HG1xTZJ0ka7h
43JxO1+u4QNZNzUKg9Qhy6gDxyVaR2Xl/trnJnefj08guUshWd3cNCm+Yl+T0uRYNNnhnF0UVsni5xVp
eBWVCA4f3KBerl02FaOF4/dBC1ogVYNgZXDDH6KUXgh0daQ9IC+VNsjqR7/+tr/M0d//HA1yC2+dlpn+
otDYl+OlZl+BNlh6QZ/lb1K0Fkx/UcCVa0gEtS4rtJRUjcY0SK6hGxlrUkWNxWynvfN5rMU1yG61Fyxr
1XyAdQd2xuOAFxXNBWYbLlzo4ARxE84EV3/YqfmikdwFKTaoF/SqZS1oNUXaQ2SSq6zYhjH0RTvGVWgK
VC54x9PAmjDUfgzr4+xO5lo8c7oW9KLCHTbU7siny8vJSV/9RK4+wPHEvS9J+pmQBM6BKgZvz89PTiNZ
kXOPE/t+t0iuyS97v8taG8k4ewhef/DBNjBySstlJbD7L/yPDLO9Ws8zl+QdWZLkinzq3ZuzUeaUVXbb
LeqivU326MfAnLRXbujh3YFDX7SJ0SPjkUgdavwfjg/XPa0vEBHBYJTZIaWWw10yHvYBcnLxNFmo2alq
RFMfaKisP712+DoE5WXEXer7R2f6DZXgZUQITecj8+9GMj32NlV52Q27ywmlhiM2WDWjeSX2Ue/zR+KP
54/+IH2a/Stdb9eziW3GUNBdRFutVWWMbzZd/e66bwfY9l3nmxnTWG8jGUSkF5HKtArHhKOuP8E7wo6X
XrFF5sUP4X434RZGqwwfKoPW8vDROblu/yMaHksitj8junlihY4pJ2UcY35ex9Q7bbAS/DXvWWd4WWJ0
9NrwMquoc2hU+y0bHhu0lVY2+qbXiOx7KKw3rIi0Ho1yWlN9km5JD7O7TX13e7tIL2b/BgAA//9ZqGMD
UBIAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
