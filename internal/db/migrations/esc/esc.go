// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    275,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5TMsQ7CIBRG4Z2n4D2YKEVDYm0jDDo1BP6kJhdava3P72pijLp/5zR2745KiPbUDzLo
5mCl20l7dj54yWlC3gh5THMpsWaWRnujW/upuGNBXP8Ibtu84qvia1kIP0/TFGsFvbvL8MpiSmAeCQ+Q
EsL0XeeCEs8AAAD//7M7eHQTAQAA
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    3901,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xXTW8bNxC961fMTTZgB87ZJ9liUiH2OlVWSIWiWHDJkcSWHyrJdawW/e8F90NaL7mO
A7SHIj1K8+bNcOb5jXx5CflOONgIiSAcuKr8FZkHb4DtqN4iVNoLCX6HsBHWebBIJXDcS3NQqD2YTR0s
jX8zubyEuQFtAkoewOgQcgiO7VBRUGJrqRdGO7CoqNBCb4EZ7YTzgaorJVxgUugc3SLsqIMSUYcc84j8
zWRyQ94vsuvJ5HZJZjmBfP2RAGUMnSskPqKE2Scg2eoeziYAAFN8RHswGqcXzWdXlY5ZUaLtvlGGo6Xe
HL8oraGcUedPGMqV0NPJea/w7OaO1IPSKF1bTXAoxVZoD+9JRpaznMzhZg1z8m62ustDa4s5yfJFvoaP
y8X9bLmGD2Td1GAWqUdeUA9eKHSeqr3/45ibPXw+O4fsIYdsdXfXpFR7/i0pTY5DW5z67KKwyhY/rkjD
q6lC8PjkB/VK44uxGGVePAYtGIlUD4J7ixvxlKSspERfR9oGxVYbi7z+6udfjo+Z/vnXdJDLKueNKswX
jda9Hq8M/wa0xW0l6Vf5mxRjJDdfNAjtGxJJnS+YUYrqaE2D5Bq6UcMh1TG3M5XkRavU05S7ZrytcNA+
alpKLDZC+jCdeC81qgkXUujf3Nju0Crhg8wa1Cvm0LIyuh8j7SEKJXTBdmHEfUHGuD1ahtoHX3gZWBOG
2s9hfZw7qNLIr3TXgl5VuMOG2h15ovztD+T2A5yNPOuG5J8JyeAKqObw9urq/CKRlWgrTuxb1SKbk5+O
VlW0DlAI/hRs+mRhbSAyOSfUXmIn4/+Q17VP69ndkrwjS5Ldkk+9dwseZY65XHeYEiHkwhubtsbeeXr2
YeA4ptJ+aMxtQ409w9npSRd1k4lFD9ZVnFLqlT9k8UJPkPPrl8lCzU45EU3d0FA9v1fG4/chmkolDKJ+
/+sFM77tSiWW3Uw3seNu7OOrbVN1pbqFdjmh1HCNFvfN+L8TG6jP7jOBp/OjP4I+zfFXVe8k85Gjw1HS
Q0I/reUUXGw2Xf3uuW8H2PbnRsJGYuVEC02IKLH0cT3FhNH8XuCNsPEZYjvklfxfgv+aBJk1usCnvUXn
RPgPbvQA/uNqjJebulsJBbxwumLKUUGmmNOKfLi/X+TXk78DAAD//y4ujWo9DwAA
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
