// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    318,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5SQvQrDIBRGd5/C93AyxhahaUJ1aKcgeiGB60+j9vk7l1Ka7Od8fJxOntWVEdLfxoka
3l0kVScq70obTW2raYOMKxQquBa8l7/Q4hbwDcHPLoVgo/9rbJDB1gPCs6W648gaMsLuUbfYGAG/ucf0
UcI5KGVGeAEyQsQ4DMow8g4AAP//d8ml+j4BAAA=
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    5116,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xYXW/bNhR996+4b0mApEifgw1wErYzmiid66ALhoGgxGuZGz80kkrsDfvvA/VhKxJl
p0ALbEgfLZ57Li/vIc+Fz85gsRIOlkIiCAeuTH/HzIM3kK2YzhFK7YUEv0JYCus8WGQSOBbSbBRqD2ZZ
LabGv5mcncG1AW0CSm7A6LDkEFy2QsVAidwyL4x2YFExoYXOITPaCecDVZtKuMCk0DmWI6yYgxRRhxjz
iPzNZHJJ3s+Si8nkak6mCwKLh48EWJahc1TiI0qYfgKS3N/C8QQA4Agf0W6MxqPT+rcrU5dZkaJtvyjD
0TJvth9SaxjPmPM7DONK6KPJSSfx9PKGVAelUbomm+CQilxoD+9JQubTBbmGywe4Ju+m9zeLsLXZNUkW
s8UDfJzPbqfzB/hAHuocmUXmkVPmwQuFzjNV+L+2scnd5+MTSO4WkNzf3NQhZcG/JKSOcWjpbp/tKtwn
s5/vSc2rmULwuPa9fKnxdGyNZV48Bi0YiUz3FguLS7GOUpZSoq9Wmg2KXBuLvPr062/bYo7+/ueoF5uV
zhtFzZNG616OV4Z/AdpiXkp2kL8OMUZy86RBaF+TSOY8zYxSTA/a1AuuoEsVO6SCWYd0Y0pfpmNHjGtv
GZViiaG73dY2/G5lSslpo/YxGi5cIdmGPjEbrqgby6ZZKvEQKlRrSk95Wd/93rY6REshfWjikKdC1ctU
Cv3HWK4CrRI+3IYa9YJ2NawZK8ZIOwiqhKbZKihhWEUXV6DNUPvwfO0HVoQhd6RZDQ6V8XhgczWGKrYe
z9dgnNC5xAOH7DYqNfJA0gb0omJbbKi3JR8vWeH+zIqtqUSd+9UekjS8ypwWK8vcofN7jqUF8x6tfpGA
rn4iVx/geKT7l2TxmZAEzoFpDm/Pz09OI1GRkzwQOLhVP/4A5yddb5ol1+SXrTfR5smngq+DL+88q1kY
uJoTqpDYvlv/I3NrSuv425y8I3OSXJFPnboFH0SO2Vo7iUQdrzN1PPvRMxJTat/323bD4VyMjdEjF5GV
aqn2ajjelXtaFRARQa+VdBdSyeEuGTZ7Bzm52E8WcraqGtBUG+or68+yetBeg6BKFXkSq/qjPf2KSihV
RAj1yUf637ZkvO1NqC5V2+w2JqTqt9hiUbfmlTwf1Wz1TPzx+MEF6dJsx+/OUMTHRjSUbBPRVvNUUS6W
yzZ/W+7bHraZS7/awzTU20AGEelFpDKuwiHh4NT38A6wQ9PLVshL+V2430y4mTWa4rqw6FyYW8bt9j+i
4aEkYv4Z0c0eCx1Sjso4xnxYx6z0xmIhxWv2WW9FnmO09caKvJ3ym/8dwmeLrjDaRSe9WmTfQmGdZkWk
9ayV45rqkrQm3Y9unfru9na2uJj8GwAA///ilnd6/BMAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
