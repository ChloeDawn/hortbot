// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    245,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/2SPPY6DMBBGe59iDrA3oOLHu7K0BBQoksoy9kggjE3sMbl+ikAUJd28p/mKV/A/ccoY
q85NC31e/HMQv8Avous7BgCgR+Uc2vjzpBTJL1L7ZVHO7PKWPOF+B1xREZqPl6hHNMl+eZXIB1ztdOw3
FSY12APpPpEeJfkZ3a4G6/WMRqaIIbIy78q84q+Ca/sWAEprjFFa3NBmjJVNXYs+Y48AAAD//9DAUkT1
AAAA
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    6166,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xY32/bthN/919xb0mApkifi+8XcBK1M5ooneugC4aBoMSTzIU/NJJy7A373wfqhy1L
lJ0OLbYie5Tuc3e8uw/vTjo/h8WSW8i4QOAWbJn8iqkDpyFdUpUjlMpxAW6JkHFjHRikAhgWQm8kKgc6
q4SJdq8n5+dwrUFpjxIb0MqLLIJNlygpSJ4b6rhWFgxKyhVXOaRaWW6dN9W64tZbkmgtzRGW1EKCqLyO
XiF7PZlcRu9n8dvJ5GoeTRcRLB4+RkDTFK0lAlcoYPoJovj+Fk4nAAAnuEKz0QpPXtXPtkxsaniCpn0j
NUNDnd6+SIymLKXW7TCUSa5OJmcdx9PLm6hKlEJhG2+cQcJzrhy8j+JoPl1E13D5ANfRu+n9zcIfbXYd
xYvZ4gE+zme30/kDfIgeah+pQeqQEerAcYnWUVm437e68d3n0zOI7xYQ39/c1Cplwb5EpdaxaMjunK0U
7uPZj/dRbVdRieBw7Xr+Eu3ImIymjq88F7RAqnrCwmDG10GTpRDoKklzQJ4rbZBVr37+ZRvMyR9/nvR0
09I6LYl+Umjs8/FSsy9AG8xLQY/ar1W0Fkw/KeDK1UYEtY6kWkqqBmXqKVfQTIaSVFBjkWx06cpkLMW4
doYSwTP01e2WtpYbmmUCCSqaCGQBIxXKLnUpGGmuxJgvxm0h6IY8UePvsR07UuXrGMqnRJeOsLJuEIGz
N4YyLpyv9MjZazERXD2O+SrQSO78lalRx1ng2wWRdFMpHPGc0mLMcQdBJFckXXpKDSPt4go0KSrn++Bh
YGXQ+96HdXEotcMjh6sxRNL1uL8GY7nKBR5Jh93IRIsjThvQs4JtsT7e1vh4yBIPe5Z0TQSq3C0PGEl8
e2ekWBpqj+VvH0sK6hwa9azGcfVDdPUBTkeqfxktPkdRDBdAFYM3FxdnrwJagUweURzcvP//Dy7OukNu
Fl9HP22HHGlmB+Fs7Qf8bvg1guF4rHto0wC/oynZhNYZlPPoXTSP4qvoUyduzgaaY/OxXWmCo7Ozvuw9
9CaSLpXrD+72wD4v2oTMI+MBSSWqhz6c7sJ9VQUQIsF+KclOpaLDXTws9g5y9vawMe9zy6q+mepAfWb9
VlYN7SUQqpSBlljFH6zpV2RCKQNEqDMfqH9bkvGyN6qqlG2xWx3vql9ig0VdmhfSPjpLZ7sxhvX7F6Rr
ZrvHdxYnNrbGoaCbALeaVkUYz7LWfxvumx62WXC/WmMa8m1AgwD1AlQZZ2HAYD/rh+z2sQPe+i9eVor/
iPvNiJsarQiuC4PW+r1lfNz+Szg8pESAxCHejLM4ZHKMxkHLR3lMS6cNFoK/5DnrDM9zDJZeG563W37z
A6P60EZbaGWDm15Nsm+7vgWHdqeWAebtVXqccl0j7Qzva4cG+Yoa7q/zi97/V1SU+PeX8DqT7om7dEmc
fkT1HWWzOfaBv47d76AqulAKKwFxmyKYYIOZQbscV8d1wc0m+AtueGH2Mk22AbSc7xViKx9ULBE6fURW
fTr/AxV7Vvrr6O9ub2eLt5O/AgAA//9ZT9mXFhgAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
