// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    226,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/2SOTY6DMAxG9z6FDzA3YMVPZhRpKKiwaFfIDZZADQklDr1+F4Wqand+T/6kl6k/fUgA
imNVY5tm/wr1L6qTbtoGEBHNQM6xDT9PikH81Bk/TeT6Td6iF97uhWcm4f7jJZiB+2i/PEXxC8923Pcr
LSNd7I5yH8UMnfgruwB52uRpoV655/qtFskYDqGzvLJNAPKqLHWbwCMAAP//Bk2IpuIAAAA=
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    5948,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xY32/bNhB+919xb0mApkifgw1wErUzmiid66ALhoGgxJPMlT80knLsDfvfB+qHLUuU
nQ4tsCJ7tO+773h3H3lnn5/DYsktZFwgcAu2TH7H1IHTkC6pyhFK5bgAt0TIuLEODFIBDAuhNxKVA51V
xkS715Pzc7jRoLRHiQ1o5U0WwaZLlBQkzw11XCsLBiXliqscUq0st85TtaG49UwSraU5wpJaSBCV99Er
ZK8nk6vo3Sy+nEyu59F0EcHi8UMENE3RWiJwhQKmHyGKH+7gdAIAcIIrNBut8ORV/dmWiU0NT9C030jN
0FCnt18kRlOWUut2GMokVyeTs07g6dVtVBVKobBNNM4g4TlXDt5FcTSfLqIbuHqEm+jt9OF24Y82u4ni
xWzxCB/ms7vp/BHeR491jNQgdcgIdeC4ROuoLNyfW9/4/tPpGcT3C4gfbm9rl7JgX+JS+1g0ZHfO1goP
8eznh6jmVVQiOFy7XrxEOzJmo6njK68FLZCqnrEwmPF1kLIUAl1laQ7Ic6UNsuqrX3/bJnPy198nPd+0
tE5Lop8UGvt8vNTsC9AG81LQo/y1i9aC6ScFXLmaRFDrSKqlpGrQpp5zBc1kqEgFNRbJRpeuTMZKjGtn
KBE8Q9/dbmtru6FZJpCgoolAFiCpUHapS8FIcyXGYjFuC0E35Ikaf4/t2JGqWMdQviS6dISV9QMROHtD
lHHhfKdHzl6bieDq81isAo3kzl+ZGvWMnjasKS3GSDsIIrki6dLLZZhFF1egSVE5/8YdBlaEPvY+rItD
qR0eOVyNIZKux+M1GMtVLvBIke1GJlocCdqAnpVsi/X5tuTjKUs8HFnSNRGocrc8QJL4p5uRYmmoPVa/
fSwpqHNo1LMEdP1TdP0eTke6fxUtPkVRDBdAFYM3FxdnrwJegUoecRzcqh9/gIuz7gCbxTfRL9sBRpq5
QDhb++G9G2yNYTj66vexedy+ownYpNYZgvPobTSP4uvoYydvzgaeY7OvXVeCY7Gzmux96E0bXSrXH8rt
gX1dtAnRI+MBS2WqBzqc7tJ9VSUQEsF+K8nOpZLDfTxs9g5ydnmYzMfcqqpPUx2or6w/yupBewmCKmXg
SazyD/b0KyqhlAEh1JUP9L9tyXjbG1dVyrbZrY8P1W+xwaJuzQt5PjoLZbsNhv37F6RLs93RO0sRG1vR
UNBNQFvNU0UYz7I2fpvumx62WV6/2sM01NtABgHpBaQyrsIAYb/qh3j72IFu/a9ZVor/hfvNhJsarQiu
C4PW+r1lfNz+RzQ8lERAxCHdjKs4RDkm4yDzUR3T0mmDheAvec46w/Mcg63Xhuftlt/8OVH9iEZbaGWD
m14tsm+7vgWHdqeXAeXtdXpccl2Sdob3vUODfEUN99f5Re//KypK/PdLeF1J98RduiROf0b1HVWzOfaB
fxS7v4Oq7EIlrAzEbYpggQ1mBu1y3B3XBTeb4N9rwwuzV2myTaDVfK8RW3vFc393N1tcTv4JAAD//3dB
1DM8FwAA
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
