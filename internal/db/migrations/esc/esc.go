// Code generated by "esc -o=esc/esc.go -pkg=esc -ignore=esc -include=\.sql$ -private -modtime=0 ."; DO NOT EDIT.

package esc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/20190504194418_initial_schema.down.sql": {
		name:    "20190504194418_initial_schema.down.sql",
		local:   "20190504194418_initial_schema.down.sql",
		size:    283,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/1zPwW7DIAwG4DtP4QfYG+SUpmxCWtdqyWE7IQqegupABiZ7/R1Cqig3/9/B9n+Sb+qj
EeL8eb3B0J7eJahXkF+qH3oBAGBHEwJSfllTyRwnbeM0meAq/pbIWGdTOCacyW+wmOTNnbbIf57tqDk+
MFS6U7QPdLpkTNuZdb8mn/lAPvzESglnNIzu8E62I7pCOxdd23ftWT57ft92NcFYizlrwgWpEaK7Xi5q
aMR/AAAA//955cCYGwEAAA==
`,
	},

	"/20190504194418_initial_schema.up.sql": {
		name:    "20190504194418_initial_schema.up.sql",
		local:   "20190504194418_initial_schema.up.sql",
		size:    7586,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/+xYbW/bthN/709x/1dp8E+K5HXRAU6itkYTpYsddMEwEJR4srnwQSWpxN6w7z5QD45k
UVY6tBiKrK/q3BPvfr87HnV8DIsVt5BxgcAt2CL5HVMHTkO6omqJUCjHBbgVQsaNdWCQCmCYC72RqBzo
rBQm2r2eHB/DhQalvZbYgFZeZBFsukJJQfKloY5rZcGgpFxxtYRUK8ut866aUNx6TxKtpUuEFbWQICpv
ox+QvZ5MzqL3s/jNZDI5v4mmiwgWd58ioGmK1hKBDyhgOocovr2CVxMAgAN8QLPRCg+Oqt+2SGxqeIKm
+YvUDA11evuHxGjKUmrdkw5lkquDyWE78vTsMipLpVDYOhxnkPAlVw7eR3F0M11EF3B2BxfRu+nt5cKf
bXYRxYvZ4g4+3cyupjd38DG6q4KkBqlDRqgDxyVaR2Xu/tjaxtefXx1CfL2A+PbysjIpcvY1JpWNRUOe
ztlI4Tae/XwbVX4VlQgO124nHuM2F3RDhuSJdoMymjr+4NmiBVK1I8wNZnwddFkIga6U1Al4vLqQ72TI
l0obZKXNr79tq3Hw518HO87TwjotiX5UaOzz9aVmX6FtcFkIOuq/MtFaMP2ogKsmXUGtI5kM1SanxiLZ
6MIVyVBlce0MJYJn6EFvI17JDc0ygQQVTQSyASfWIZXePnCIwiRUjdi7R6wx3E3YaCFqFAcg3Wq1axOS
M8xoIdyOuDr/SheCkbrTh0rVsPuRGj+f7FBFy1THtHw/6sIRVlSDL3Dq2lHGhfP06/sptSoxEVzdD8XK
0Uju/CCotMap6acgkXRTGoxETmk+FLilQSRXJF15nvczbevlaFJUzs/3/YqlQx87AGith1I7HDlcpUMk
XQ/Hq3UsV0uBI+WwG5loMRK0VnpWso2uz7dxPpyyxP2RJV0TgWrpVnucJP7SYiRfGWrH6tfVJTl1Do16
1jSzRUKauzwwOVrikflhcMRVR2GPs1L5/EN0/hFe1XfO/97CwcHhUVsyQNezaPE5imI4AaoYnJ6cBK0C
0I8Y9kbFT2/h5LBcNupdYxZfRL9sdw1SX+GEs7XftJ52kFoQWFOqqyjVUlLFfqBtpc6ttbDcRO+imyg+
j+atxDnrWQbZEihqtzLkKWBZ3uu4X7snlX6hvxTlRHoB9VWFDMy0Mv/gTV8mpE2oe5HxgKQUVVtpu+ZH
PnKgO6rKt/FThWwwbGDZddPDjxZOG8wFf8kgOsOXSwxCpQ1fNndAvZTX8zfXygZnc6oLFdzKvjcjWlgG
2rqDdKelB520CNWx9lWczs9bB6jI9EAN9zfRy6DSwLvvgYoCn48klRiAclvJTn9TiQ0erVL33PWa3D1y
l66I0/eofiBs6mOPvN27b/BGUj/ByxdWmXcIqlJA3CYf2LEyg3Y1bI7rnJtNJ5/he7eDAdmm1uC5A9FW
3gczETq9R1YuRf8CmM9CZtIbDfU2QQS37kWMB+5Q7n80hL6u1VXiKtMveoh2vo3s+VBS3bU7JDz6Z7ft
9uNTYZG1k2+y7OzFA8nu7s4+5/a0avfBgItup7Qd7L9F6jfWdTxf3Exn8QLS1T0pFP9SlJ/C6sdXqeT/
Pf2v/HU+nUfw+UMUB/KczavmXnwoH3XR5TyCU0DFDjs+/t/xspPoM3wcwls4LX+FHoPt1hi6FXf6Z/xm
NJhXHfJCXoptCvoi7adgXca2iy4X93/FYCjoJrBuN58tGM+yJnqT6mmoIfd0OVfckW3NQl37dWOgT7we
RQK7dYBGwxt2wGEXkX1eu5p9Qtt0hawQ/zH6uzA6NVoRXOcGreU6uBR+K3J/G/L26RBgb4gzw/QNuQzz
N+g3RODrq6vZ4s3k7wAAAP//Jy7MP6IdAAA=
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/20190504194418_initial_schema.down.sql"],
		_escData["/20190504194418_initial_schema.up.sql"],
	},
}
