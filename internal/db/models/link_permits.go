// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// LinkPermit is an object representing the database table.
type LinkPermit struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ChannelID int64     `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`

	R *linkPermitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L linkPermitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LinkPermitColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ChannelID string
	Name      string
	ExpiresAt string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ChannelID: "channel_id",
	Name:      "name",
	ExpiresAt: "expires_at",
}

// Generated where

var LinkPermitWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ChannelID whereHelperint64
	Name      whereHelperstring
	ExpiresAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"link_permits\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"link_permits\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"link_permits\".\"updated_at\""},
	ChannelID: whereHelperint64{field: "\"link_permits\".\"channel_id\""},
	Name:      whereHelperstring{field: "\"link_permits\".\"name\""},
	ExpiresAt: whereHelpertime_Time{field: "\"link_permits\".\"expires_at\""},
}

// LinkPermitRels is where relationship names are stored.
var LinkPermitRels = struct {
	Channel string
}{
	Channel: "Channel",
}

// linkPermitR is where relationships are stored.
type linkPermitR struct {
	Channel *Channel
}

// NewStruct creates a new relationship struct
func (*linkPermitR) NewStruct() *linkPermitR {
	return &linkPermitR{}
}

// linkPermitL is where Load methods for each relationship are stored.
type linkPermitL struct{}

var (
	linkPermitAllColumns            = []string{"id", "created_at", "updated_at", "channel_id", "name", "expires_at"}
	linkPermitColumnsWithoutDefault = []string{"channel_id", "name", "expires_at"}
	linkPermitColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	linkPermitPrimaryKeyColumns     = []string{"id"}
)

type (
	// LinkPermitSlice is an alias for a slice of pointers to LinkPermit.
	// This should generally be used opposed to []LinkPermit.
	LinkPermitSlice []*LinkPermit

	linkPermitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	linkPermitType                 = reflect.TypeOf(&LinkPermit{})
	linkPermitMapping              = queries.MakeStructMapping(linkPermitType)
	linkPermitPrimaryKeyMapping, _ = queries.BindMapping(linkPermitType, linkPermitMapping, linkPermitPrimaryKeyColumns)
	linkPermitInsertCacheMut       sync.RWMutex
	linkPermitInsertCache          = make(map[string]insertCache)
	linkPermitUpdateCacheMut       sync.RWMutex
	linkPermitUpdateCache          = make(map[string]updateCache)
	linkPermitUpsertCacheMut       sync.RWMutex
	linkPermitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single linkPermit record from the query.
func (q linkPermitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LinkPermit, error) {
	o := &LinkPermit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for link_permits")
	}

	return o, nil
}

// All returns all LinkPermit records from the query.
func (q linkPermitQuery) All(ctx context.Context, exec boil.ContextExecutor) (LinkPermitSlice, error) {
	var o []*LinkPermit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LinkPermit slice")
	}

	return o, nil
}

// Count returns the count of all LinkPermit records in the query.
func (q linkPermitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count link_permits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q linkPermitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if link_permits exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *LinkPermit) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "\"channels\"")

	return query
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (linkPermitL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLinkPermit interface{}, mods queries.Applicator) error {
	var slice []*LinkPermit
	var object *LinkPermit

	if singular {
		object = maybeLinkPermit.(*LinkPermit)
	} else {
		slice = *maybeLinkPermit.(*[]*LinkPermit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &linkPermitR{}
		}
		args = append(args, object.ChannelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &linkPermitR{}
			}

			for _, a := range args {
				if a == obj.ChannelID {
					continue Outer
				}
			}

			args = append(args, obj.ChannelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channels`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.LinkPermits = append(foreign.R.LinkPermits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.LinkPermits = append(foreign.R.LinkPermits, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the linkPermit to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.LinkPermits.
func (o *LinkPermit) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"link_permits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, linkPermitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &linkPermitR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			LinkPermits: LinkPermitSlice{o},
		}
	} else {
		related.R.LinkPermits = append(related.R.LinkPermits, o)
	}

	return nil
}

// LinkPermits retrieves all the records using an executor.
func LinkPermits(mods ...qm.QueryMod) linkPermitQuery {
	mods = append(mods, qm.From("\"link_permits\""))
	return linkPermitQuery{NewQuery(mods...)}
}

// FindLinkPermit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLinkPermit(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*LinkPermit, error) {
	linkPermitObj := &LinkPermit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"link_permits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, linkPermitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from link_permits")
	}

	return linkPermitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LinkPermit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no link_permits provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(linkPermitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	linkPermitInsertCacheMut.RLock()
	cache, cached := linkPermitInsertCache[key]
	linkPermitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			linkPermitAllColumns,
			linkPermitColumnsWithDefault,
			linkPermitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(linkPermitType, linkPermitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(linkPermitType, linkPermitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"link_permits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"link_permits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into link_permits")
	}

	if !cached {
		linkPermitInsertCacheMut.Lock()
		linkPermitInsertCache[key] = cache
		linkPermitInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the LinkPermit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LinkPermit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	linkPermitUpdateCacheMut.RLock()
	cache, cached := linkPermitUpdateCache[key]
	linkPermitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			linkPermitAllColumns,
			linkPermitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update link_permits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"link_permits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, linkPermitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(linkPermitType, linkPermitMapping, append(wl, linkPermitPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update link_permits row")
	}

	if !cached {
		linkPermitUpdateCacheMut.Lock()
		linkPermitUpdateCache[key] = cache
		linkPermitUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q linkPermitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for link_permits")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LinkPermitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkPermitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"link_permits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, linkPermitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in linkPermit slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LinkPermit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no link_permits provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(linkPermitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	linkPermitUpsertCacheMut.RLock()
	cache, cached := linkPermitUpsertCache[key]
	linkPermitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			linkPermitAllColumns,
			linkPermitColumnsWithDefault,
			linkPermitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			linkPermitAllColumns,
			linkPermitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert link_permits, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(linkPermitPrimaryKeyColumns))
			copy(conflict, linkPermitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"link_permits\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(linkPermitType, linkPermitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(linkPermitType, linkPermitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert link_permits")
	}

	if !cached {
		linkPermitUpsertCacheMut.Lock()
		linkPermitUpsertCache[key] = cache
		linkPermitUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single LinkPermit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LinkPermit) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no LinkPermit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), linkPermitPrimaryKeyMapping)
	sql := "DELETE FROM \"link_permits\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from link_permits")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q linkPermitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no linkPermitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from link_permits")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LinkPermitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkPermitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"link_permits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, linkPermitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from linkPermit slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LinkPermit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLinkPermit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LinkPermitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LinkPermitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkPermitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"link_permits\".* FROM \"link_permits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, linkPermitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LinkPermitSlice")
	}

	*o = slice

	return nil
}

// LinkPermitExists checks if the LinkPermit row exists.
func LinkPermitExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"link_permits\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if link_permits exists")
	}

	return exists, nil
}
