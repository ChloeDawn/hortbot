// Code generated by counterfeiter. DO NOT EDIT.
package steamfakes

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/steam"
)

type FakeAPI struct {
	GetOwnedGamesStub        func(context.Context, string) ([]*steam.Game, error)
	getOwnedGamesMutex       sync.RWMutex
	getOwnedGamesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getOwnedGamesReturns struct {
		result1 []*steam.Game
		result2 error
	}
	getOwnedGamesReturnsOnCall map[int]struct {
		result1 []*steam.Game
		result2 error
	}
	GetPlayerSummaryStub        func(context.Context, string) (*steam.Summary, error)
	getPlayerSummaryMutex       sync.RWMutex
	getPlayerSummaryArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getPlayerSummaryReturns struct {
		result1 *steam.Summary
		result2 error
	}
	getPlayerSummaryReturnsOnCall map[int]struct {
		result1 *steam.Summary
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetOwnedGames(arg1 context.Context, arg2 string) ([]*steam.Game, error) {
	fake.getOwnedGamesMutex.Lock()
	ret, specificReturn := fake.getOwnedGamesReturnsOnCall[len(fake.getOwnedGamesArgsForCall)]
	fake.getOwnedGamesArgsForCall = append(fake.getOwnedGamesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetOwnedGames", []interface{}{arg1, arg2})
	fake.getOwnedGamesMutex.Unlock()
	if fake.GetOwnedGamesStub != nil {
		return fake.GetOwnedGamesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOwnedGamesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetOwnedGamesCallCount() int {
	fake.getOwnedGamesMutex.RLock()
	defer fake.getOwnedGamesMutex.RUnlock()
	return len(fake.getOwnedGamesArgsForCall)
}

func (fake *FakeAPI) GetOwnedGamesCalls(stub func(context.Context, string) ([]*steam.Game, error)) {
	fake.getOwnedGamesMutex.Lock()
	defer fake.getOwnedGamesMutex.Unlock()
	fake.GetOwnedGamesStub = stub
}

func (fake *FakeAPI) GetOwnedGamesArgsForCall(i int) (context.Context, string) {
	fake.getOwnedGamesMutex.RLock()
	defer fake.getOwnedGamesMutex.RUnlock()
	argsForCall := fake.getOwnedGamesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetOwnedGamesReturns(result1 []*steam.Game, result2 error) {
	fake.getOwnedGamesMutex.Lock()
	defer fake.getOwnedGamesMutex.Unlock()
	fake.GetOwnedGamesStub = nil
	fake.getOwnedGamesReturns = struct {
		result1 []*steam.Game
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetOwnedGamesReturnsOnCall(i int, result1 []*steam.Game, result2 error) {
	fake.getOwnedGamesMutex.Lock()
	defer fake.getOwnedGamesMutex.Unlock()
	fake.GetOwnedGamesStub = nil
	if fake.getOwnedGamesReturnsOnCall == nil {
		fake.getOwnedGamesReturnsOnCall = make(map[int]struct {
			result1 []*steam.Game
			result2 error
		})
	}
	fake.getOwnedGamesReturnsOnCall[i] = struct {
		result1 []*steam.Game
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlayerSummary(arg1 context.Context, arg2 string) (*steam.Summary, error) {
	fake.getPlayerSummaryMutex.Lock()
	ret, specificReturn := fake.getPlayerSummaryReturnsOnCall[len(fake.getPlayerSummaryArgsForCall)]
	fake.getPlayerSummaryArgsForCall = append(fake.getPlayerSummaryArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetPlayerSummary", []interface{}{arg1, arg2})
	fake.getPlayerSummaryMutex.Unlock()
	if fake.GetPlayerSummaryStub != nil {
		return fake.GetPlayerSummaryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlayerSummaryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetPlayerSummaryCallCount() int {
	fake.getPlayerSummaryMutex.RLock()
	defer fake.getPlayerSummaryMutex.RUnlock()
	return len(fake.getPlayerSummaryArgsForCall)
}

func (fake *FakeAPI) GetPlayerSummaryCalls(stub func(context.Context, string) (*steam.Summary, error)) {
	fake.getPlayerSummaryMutex.Lock()
	defer fake.getPlayerSummaryMutex.Unlock()
	fake.GetPlayerSummaryStub = stub
}

func (fake *FakeAPI) GetPlayerSummaryArgsForCall(i int) (context.Context, string) {
	fake.getPlayerSummaryMutex.RLock()
	defer fake.getPlayerSummaryMutex.RUnlock()
	argsForCall := fake.getPlayerSummaryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetPlayerSummaryReturns(result1 *steam.Summary, result2 error) {
	fake.getPlayerSummaryMutex.Lock()
	defer fake.getPlayerSummaryMutex.Unlock()
	fake.GetPlayerSummaryStub = nil
	fake.getPlayerSummaryReturns = struct {
		result1 *steam.Summary
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetPlayerSummaryReturnsOnCall(i int, result1 *steam.Summary, result2 error) {
	fake.getPlayerSummaryMutex.Lock()
	defer fake.getPlayerSummaryMutex.Unlock()
	fake.GetPlayerSummaryStub = nil
	if fake.getPlayerSummaryReturnsOnCall == nil {
		fake.getPlayerSummaryReturnsOnCall = make(map[int]struct {
			result1 *steam.Summary
			result2 error
		})
	}
	fake.getPlayerSummaryReturnsOnCall[i] = struct {
		result1 *steam.Summary
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOwnedGamesMutex.RLock()
	defer fake.getOwnedGamesMutex.RUnlock()
	fake.getPlayerSummaryMutex.RLock()
	defer fake.getPlayerSummaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ steam.API = new(FakeAPI)
