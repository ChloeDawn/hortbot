// Code generated by counterfeiter. DO NOT EDIT.
package xkcdfakes

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apiclient/xkcd"
)

type FakeAPI struct {
	GetComicStub        func(context.Context, int) (*xkcd.Comic, error)
	getComicMutex       sync.RWMutex
	getComicArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	getComicReturns struct {
		result1 *xkcd.Comic
		result2 error
	}
	getComicReturnsOnCall map[int]struct {
		result1 *xkcd.Comic
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetComic(arg1 context.Context, arg2 int) (*xkcd.Comic, error) {
	fake.getComicMutex.Lock()
	ret, specificReturn := fake.getComicReturnsOnCall[len(fake.getComicArgsForCall)]
	fake.getComicArgsForCall = append(fake.getComicArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.GetComicStub
	fakeReturns := fake.getComicReturns
	fake.recordInvocation("GetComic", []interface{}{arg1, arg2})
	fake.getComicMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetComicCallCount() int {
	fake.getComicMutex.RLock()
	defer fake.getComicMutex.RUnlock()
	return len(fake.getComicArgsForCall)
}

func (fake *FakeAPI) GetComicCalls(stub func(context.Context, int) (*xkcd.Comic, error)) {
	fake.getComicMutex.Lock()
	defer fake.getComicMutex.Unlock()
	fake.GetComicStub = stub
}

func (fake *FakeAPI) GetComicArgsForCall(i int) (context.Context, int) {
	fake.getComicMutex.RLock()
	defer fake.getComicMutex.RUnlock()
	argsForCall := fake.getComicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetComicReturns(result1 *xkcd.Comic, result2 error) {
	fake.getComicMutex.Lock()
	defer fake.getComicMutex.Unlock()
	fake.GetComicStub = nil
	fake.getComicReturns = struct {
		result1 *xkcd.Comic
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetComicReturnsOnCall(i int, result1 *xkcd.Comic, result2 error) {
	fake.getComicMutex.Lock()
	defer fake.getComicMutex.Unlock()
	fake.GetComicStub = nil
	if fake.getComicReturnsOnCall == nil {
		fake.getComicReturnsOnCall = make(map[int]struct {
			result1 *xkcd.Comic
			result2 error
		})
	}
	fake.getComicReturnsOnCall[i] = struct {
		result1 *xkcd.Comic
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getComicMutex.RLock()
	defer fake.getComicMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ xkcd.API = new(FakeAPI)
