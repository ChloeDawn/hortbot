// Code generated by counterfeiter. DO NOT EDIT.
package extralifefakes

import (
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/apis/extralife"
)

type FakeAPI struct {
	GetDonationAmountStub        func(int) (float64, error)
	getDonationAmountMutex       sync.RWMutex
	getDonationAmountArgsForCall []struct {
		arg1 int
	}
	getDonationAmountReturns struct {
		result1 float64
		result2 error
	}
	getDonationAmountReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetDonationAmount(arg1 int) (float64, error) {
	fake.getDonationAmountMutex.Lock()
	ret, specificReturn := fake.getDonationAmountReturnsOnCall[len(fake.getDonationAmountArgsForCall)]
	fake.getDonationAmountArgsForCall = append(fake.getDonationAmountArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetDonationAmount", []interface{}{arg1})
	fake.getDonationAmountMutex.Unlock()
	if fake.GetDonationAmountStub != nil {
		return fake.GetDonationAmountStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDonationAmountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetDonationAmountCallCount() int {
	fake.getDonationAmountMutex.RLock()
	defer fake.getDonationAmountMutex.RUnlock()
	return len(fake.getDonationAmountArgsForCall)
}

func (fake *FakeAPI) GetDonationAmountCalls(stub func(int) (float64, error)) {
	fake.getDonationAmountMutex.Lock()
	defer fake.getDonationAmountMutex.Unlock()
	fake.GetDonationAmountStub = stub
}

func (fake *FakeAPI) GetDonationAmountArgsForCall(i int) int {
	fake.getDonationAmountMutex.RLock()
	defer fake.getDonationAmountMutex.RUnlock()
	argsForCall := fake.getDonationAmountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPI) GetDonationAmountReturns(result1 float64, result2 error) {
	fake.getDonationAmountMutex.Lock()
	defer fake.getDonationAmountMutex.Unlock()
	fake.GetDonationAmountStub = nil
	fake.getDonationAmountReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetDonationAmountReturnsOnCall(i int, result1 float64, result2 error) {
	fake.getDonationAmountMutex.Lock()
	defer fake.getDonationAmountMutex.Unlock()
	fake.GetDonationAmountStub = nil
	if fake.getDonationAmountReturnsOnCall == nil {
		fake.getDonationAmountReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.getDonationAmountReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDonationAmountMutex.RLock()
	defer fake.getDonationAmountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extralife.API = new(FakeAPI)
