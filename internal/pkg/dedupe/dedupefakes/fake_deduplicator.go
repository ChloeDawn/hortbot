// Code generated by counterfeiter. DO NOT EDIT.
package dedupefakes

import (
	"context"
	"sync"

	"github.com/hortbot/hortbot/internal/pkg/dedupe"
)

type FakeDeduplicator struct {
	CheckStub        func(context.Context, string) (bool, error)
	checkMutex       sync.RWMutex
	checkArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	checkReturns struct {
		result1 bool
		result2 error
	}
	checkReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CheckAndMarkStub        func(context.Context, string) (bool, error)
	checkAndMarkMutex       sync.RWMutex
	checkAndMarkArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	checkAndMarkReturns struct {
		result1 bool
		result2 error
	}
	checkAndMarkReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	MarkStub        func(context.Context, string) error
	markMutex       sync.RWMutex
	markArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	markReturns struct {
		result1 error
	}
	markReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeduplicator) Check(arg1 context.Context, arg2 string) (bool, error) {
	fake.checkMutex.Lock()
	ret, specificReturn := fake.checkReturnsOnCall[len(fake.checkArgsForCall)]
	fake.checkArgsForCall = append(fake.checkArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Check", []interface{}{arg1, arg2})
	fake.checkMutex.Unlock()
	if fake.CheckStub != nil {
		return fake.CheckStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeduplicator) CheckCallCount() int {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	return len(fake.checkArgsForCall)
}

func (fake *FakeDeduplicator) CheckCalls(stub func(context.Context, string) (bool, error)) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = stub
}

func (fake *FakeDeduplicator) CheckArgsForCall(i int) (context.Context, string) {
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	argsForCall := fake.checkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDeduplicator) CheckReturns(result1 bool, result2 error) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	fake.checkReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDeduplicator) CheckReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkMutex.Lock()
	defer fake.checkMutex.Unlock()
	fake.CheckStub = nil
	if fake.checkReturnsOnCall == nil {
		fake.checkReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDeduplicator) CheckAndMark(arg1 context.Context, arg2 string) (bool, error) {
	fake.checkAndMarkMutex.Lock()
	ret, specificReturn := fake.checkAndMarkReturnsOnCall[len(fake.checkAndMarkArgsForCall)]
	fake.checkAndMarkArgsForCall = append(fake.checkAndMarkArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CheckAndMark", []interface{}{arg1, arg2})
	fake.checkAndMarkMutex.Unlock()
	if fake.CheckAndMarkStub != nil {
		return fake.CheckAndMarkStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkAndMarkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeduplicator) CheckAndMarkCallCount() int {
	fake.checkAndMarkMutex.RLock()
	defer fake.checkAndMarkMutex.RUnlock()
	return len(fake.checkAndMarkArgsForCall)
}

func (fake *FakeDeduplicator) CheckAndMarkCalls(stub func(context.Context, string) (bool, error)) {
	fake.checkAndMarkMutex.Lock()
	defer fake.checkAndMarkMutex.Unlock()
	fake.CheckAndMarkStub = stub
}

func (fake *FakeDeduplicator) CheckAndMarkArgsForCall(i int) (context.Context, string) {
	fake.checkAndMarkMutex.RLock()
	defer fake.checkAndMarkMutex.RUnlock()
	argsForCall := fake.checkAndMarkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDeduplicator) CheckAndMarkReturns(result1 bool, result2 error) {
	fake.checkAndMarkMutex.Lock()
	defer fake.checkAndMarkMutex.Unlock()
	fake.CheckAndMarkStub = nil
	fake.checkAndMarkReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDeduplicator) CheckAndMarkReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkAndMarkMutex.Lock()
	defer fake.checkAndMarkMutex.Unlock()
	fake.CheckAndMarkStub = nil
	if fake.checkAndMarkReturnsOnCall == nil {
		fake.checkAndMarkReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkAndMarkReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDeduplicator) Mark(arg1 context.Context, arg2 string) error {
	fake.markMutex.Lock()
	ret, specificReturn := fake.markReturnsOnCall[len(fake.markArgsForCall)]
	fake.markArgsForCall = append(fake.markArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Mark", []interface{}{arg1, arg2})
	fake.markMutex.Unlock()
	if fake.MarkStub != nil {
		return fake.MarkStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.markReturns
	return fakeReturns.result1
}

func (fake *FakeDeduplicator) MarkCallCount() int {
	fake.markMutex.RLock()
	defer fake.markMutex.RUnlock()
	return len(fake.markArgsForCall)
}

func (fake *FakeDeduplicator) MarkCalls(stub func(context.Context, string) error) {
	fake.markMutex.Lock()
	defer fake.markMutex.Unlock()
	fake.MarkStub = stub
}

func (fake *FakeDeduplicator) MarkArgsForCall(i int) (context.Context, string) {
	fake.markMutex.RLock()
	defer fake.markMutex.RUnlock()
	argsForCall := fake.markArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDeduplicator) MarkReturns(result1 error) {
	fake.markMutex.Lock()
	defer fake.markMutex.Unlock()
	fake.MarkStub = nil
	fake.markReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeduplicator) MarkReturnsOnCall(i int, result1 error) {
	fake.markMutex.Lock()
	defer fake.markMutex.Unlock()
	fake.MarkStub = nil
	if fake.markReturnsOnCall == nil {
		fake.markReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.markReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeduplicator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkMutex.RLock()
	defer fake.checkMutex.RUnlock()
	fake.checkAndMarkMutex.RLock()
	defer fake.checkAndMarkMutex.RUnlock()
	fake.markMutex.RLock()
	defer fake.markMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeduplicator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dedupe.Deduplicator = new(FakeDeduplicator)
