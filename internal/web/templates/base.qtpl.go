// Code generated by qtc from "base.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type Page interface {
	PageBrand() string
	StreamPageBrand(qw422016 *qt422016.Writer)
	WritePageBrand(qq422016 qtio422016.Writer)
	PageTitle() string
	StreamPageTitle(qw422016 *qt422016.Writer)
	WritePageTitle(qq422016 qtio422016.Writer)
	PageBody() string
	StreamPageBody(qw422016 *qt422016.Writer)
	WritePageBody(qq422016 qtio422016.Writer)
	PageMeta() string
	StreamPageMeta(qw422016 *qt422016.Writer)
	WritePageMeta(qq422016 qtio422016.Writer)
	PageScripts() string
	StreamPageScripts(qw422016 *qt422016.Writer)
	WritePageScripts(qq422016 qtio422016.Writer)
	PageLogin() string
	StreamPageLogin(qw422016 *qt422016.Writer)
	WritePageLogin(qq422016 qtio422016.Writer)
}

func StreamPageTemplate(qw422016 *qt422016.Writer, p Page) {
	qw422016.N().S(`
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">

        <link rel="apple-touch-icon" sizes="76x76" href="/static/icons/apple-touch-icon.png">
        <link rel="icon" type="image/png" sizes="32x32" href="/static/icons/favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="16x16" href="/static/icons/favicon-16x16.png">
        <link rel="manifest" href="/static/icons/site.webmanifest">
        <link rel="mask-icon" href="/static/icons/safari-pinned-tab.svg" color="#5bbad5">
        <link rel="shortcut icon" href="/static/icons/favicon.ico">
        <meta name="msapplication-TileColor" content="#da532c">
        <meta name="msapplication-config" content="/static/icons/browserconfig.xml">
        <meta name="theme-color" content="#ffffff">

        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>`)
	p.StreamPageTitle(qw422016)
	qw422016.N().S(`</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulmaswatch/0.7.5/darkly/bulmaswatch.min.css" integrity="sha256-QibVcUotghK/a7LpR6SwHNs5y5KRfFzP3Qq67KghR6c=" crossorigin="anonymous" />

        <style>
        code {
            color: white !important;
            background-color: #333333 !important;
        }

        .list-item {
            border-top-left-radius: 0px !important;
            border-top-right-radius: 0px !important;
            border-bottom-left-radius: 0px !important;
            border-bottom-right-radius: 0px !important;
        }
        </style>

        `)
	p.StreamPageMeta(qw422016)
	qw422016.N().S(`
    </head>
    <body>
        <nav class="navbar" id="header">
            <div class="navbar-brand">
                <a class="navbar-item is-active" href="/">`)
	p.StreamPageBrand(qw422016)
	qw422016.N().S(`</a>

                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navMenu">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div class="navbar-menu" id="navMenu">
                <div class="navbar-start">
                    <a class="navbar-item" href="/channels">Channels</a>
                    <a class="navbar-item" href="/docs">Documentation</a>
                    <a class="navbar-item" href="/help">Help</a>
                    <a class="navbar-item" href="https://discord.gg/V9Eza32">Discord</a>
                    <a class="navbar-item" href="/about">About</a>
                </div>

                `)
	p.StreamPageLogin(qw422016)
	qw422016.N().S(`
            </div>
        </nav>

        `)
	p.StreamPageBody(qw422016)
	qw422016.N().S(`

        <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/js/all.min.js" integrity="sha256-MAgcygDRahs+F/Nk5Vz387whB4kSK9NXlDN3w58LLq0=" crossorigin="anonymous"></script>

        `)
	p.StreamPageScripts(qw422016)
	qw422016.N().S(`

        <script>
            document.addEventListener('DOMContentLoaded', () => {

            // Get all "navbar-burger" elements
            const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

            // Check if there are any navbar burgers
            if ($navbarBurgers.length > 0) {

            // Add a click event on each of them
            $navbarBurgers.forEach( el => {
                el.addEventListener('click', () => {

                // Get the target from the "data-target" attribute
                const target = el.dataset.target;
                const $target = document.getElementById(target);

                // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
                el.classList.toggle('is-active');
                $target.classList.toggle('is-active');

                });
            });
            }

            });
        </script>
    </body>
</html>
`)
}

func WritePageTemplate(qq422016 qtio422016.Writer, p Page) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamPageTemplate(qw422016, p)
	qt422016.ReleaseWriter(qw422016)
}

func PageTemplate(p Page) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WritePageTemplate(qb422016, p)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

type BasePage struct {
	Brand string
	User  string
}

func (p *BasePage) StreamPageBrand(qw422016 *qt422016.Writer) {
	qw422016.E().S(nonempty(p.Brand))
}

func (p *BasePage) WritePageBrand(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBrand(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageBrand() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBrand(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageBody(qw422016 *qt422016.Writer) {
}

func (p *BasePage) WritePageBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageBody() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageMeta(qw422016 *qt422016.Writer) {
}

func (p *BasePage) WritePageMeta(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageMeta(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageMeta() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageMeta(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageScripts(qw422016 *qt422016.Writer) {
}

func (p *BasePage) WritePageScripts(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageScripts(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageScripts() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageScripts(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageLogin(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="navbar-end">
    `)
	if p.User == "" {
		qw422016.N().S(`
    <a class="navbar-item" href="/login">
        <span>Log in</span>
        <span class="icon"><i class="fas fa-sign-in-alt"></i></span>
    </a>
    `)
	} else {
		qw422016.N().S(`
    <span class="navbar-item">
        Welcome, `)
		qw422016.E().S(p.User)
		qw422016.N().S(`.
    </span>
    <a class="navbar-item" href="/logout">
        <span>Log out</span>
        <span class="icon"><i class="fas fa-sign-out-alt"></i></span>
    </a>
    `)
	}
	qw422016.N().S(`
</div>
`)
}

func (p *BasePage) WritePageLogin(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageLogin(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageLogin() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageLogin(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func nonempty(s string) string {
	if s == "" {
		panic("empty string")
	}
	return s
}
