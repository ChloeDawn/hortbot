// Code generated by qtc from "base.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	"context"

	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type Page interface {
	PageTitle(ctx context.Context) string
	StreamPageTitle(qw422016 *qt422016.Writer, ctx context.Context)
	WritePageTitle(qq422016 qtio422016.Writer, ctx context.Context)
	PageBody(ctx context.Context) string
	StreamPageBody(qw422016 *qt422016.Writer, ctx context.Context)
	WritePageBody(qq422016 qtio422016.Writer, ctx context.Context)
	PageMeta(ctx context.Context) string
	StreamPageMeta(qw422016 *qt422016.Writer, ctx context.Context)
	WritePageMeta(qq422016 qtio422016.Writer, ctx context.Context)
	PageScripts(ctx context.Context) string
	StreamPageScripts(qw422016 *qt422016.Writer, ctx context.Context)
	WritePageScripts(qq422016 qtio422016.Writer, ctx context.Context)
}

func StreamPageTemplate(qw422016 *qt422016.Writer, ctx context.Context, p Page) {
	qw422016.N().S(`
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <title>`)
	p.StreamPageTitle(qw422016, ctx)
	qw422016.N().S(`</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.3.1/darkly/bootstrap.min.css" integrity="sha256-6W1mxPaAt4a6pkJVW5x5Xmq/LvxuQpR9dlzgy77SeZs=" crossorigin="anonymous" />

        `)
	p.StreamPageMeta(qw422016, ctx)
	qw422016.N().S(`
    </head>
    <body>
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top box-shadow">
            <div class="container">
                <a class="navbar-brand" href="/">HortBot</a>
                <div class="nav-item">
                    <a class="nav-link active text-white" href="/channels">Channels</a>
                </div>
                <div class="nav-item">
                    <a class="nav-link active text-white" href="/docs">Documentation</a>
                </div>
                <div class="nav-item">
                    <a class="nav-link text-white" href="/about">About</a>
                </div>
                <div class="nav-item ml-auto">
                    <a class="nav-link text-white" href="/login">Log In</a>
                </div>
            </div>
        </nav>

        <div class="container">
            `)
	p.StreamPageBody(qw422016, ctx)
	qw422016.N().S(`
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.slim.min.js" integrity="sha256-3edrmyuQ0w65f8gfBsqowzjJe2iM6n0nKciPUp8y+7E=" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha256-ZvOgfh+ptkpoa2Y4HkRY28ir89u/+VRyDE7sB7hEEcI=" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha256-CjSoeELFOcH0/uxWu6mC/Vlrc1AARqbm/jiiImDGV3s=" crossorigin="anonymous"></script>

        `)
	p.StreamPageScripts(qw422016, ctx)
	qw422016.N().S(`
    </body>
</html>
`)
}

func WritePageTemplate(qq422016 qtio422016.Writer, ctx context.Context, p Page) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamPageTemplate(qw422016, ctx, p)
	qt422016.ReleaseWriter(qw422016)
}

func PageTemplate(ctx context.Context, p Page) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WritePageTemplate(qb422016, ctx, p)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

type BasePage struct{}

func (p *BasePage) StreamPageTitle(qw422016 *qt422016.Writer, ctx context.Context) {
	qw422016.N().S(`HortBot`)
}

func (p *BasePage) WritePageTitle(qq422016 qtio422016.Writer, ctx context.Context) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageTitle(qw422016, ctx)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageTitle(ctx context.Context) string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageTitle(qb422016, ctx)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageBody(qw422016 *qt422016.Writer, ctx context.Context) {
}

func (p *BasePage) WritePageBody(qq422016 qtio422016.Writer, ctx context.Context) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016, ctx)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageBody(ctx context.Context) string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016, ctx)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageMeta(qw422016 *qt422016.Writer, ctx context.Context) {
}

func (p *BasePage) WritePageMeta(qq422016 qtio422016.Writer, ctx context.Context) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageMeta(qw422016, ctx)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageMeta(ctx context.Context) string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageMeta(qb422016, ctx)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamPageScripts(qw422016 *qt422016.Writer, ctx context.Context) {
}

func (p *BasePage) WritePageScripts(qq422016 qtio422016.Writer, ctx context.Context) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageScripts(qw422016, ctx)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) PageScripts(ctx context.Context) string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageScripts(qb422016, ctx)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
