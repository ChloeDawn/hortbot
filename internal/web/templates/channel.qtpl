{% import (
    "time"

    "github.com/hako/durafmt"
    "github.com/hortbot/hortbot/internal/cbp"
    "github.com/hortbot/hortbot/internal/db/models"
) %}

{% code
type ChannelPage struct {
    BasePage
    Channel *models.Channel
}
%}

{% func (p *ChannelPage) PageTitle() %}
{%= p.PageBrand() %} - {%s displayNameFor(p.Channel) %}
{% endfunc %}


{% func (p *ChannelPage) PageMeta() %}
{%= p.BasePage.PageMeta() %}
{%= sidebarStyle() %}
<style>
.subtitle {
    padding-left: 1rem;
}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.16.0/themes/bulma/bootstrap-table-bulma.min.css" integrity="sha256-u49ra7w4V15McfEDsAvfE6A+W18iGcM7mWlkBmASoAs=" crossorigin="anonymous" />
{% endfunc %}

{% func (p *ChannelPage) PageScripts() %}
{%= p.BasePage.PageScripts() %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.16.0/bootstrap-table.min.js" integrity="sha256-JFzlEUS2cZGdNFhVNH3GSFuqZFLjzWIjOqG5BY+Yhvw=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.16.0/themes/bulma/bootstrap-table-bulma.min.js" integrity="sha256-EiXUuCvnTWCYTHg2nWE3Yd0N0fprGRbVTkPMJ7s4enU=" crossorigin="anonymous"></script>
<script>
function timeFormatter(value) {
    try {
        var d = new Date(value);
        return d.toLocaleString();
    } catch {
        return "";
    }
}

function timeSorter(a, b) {
    try {
        return Date.parse(a) - Date.parse(b);
    } catch {
        return 0;
    }
}
</script>
{% endfunc %}


{% func isActive(a, b string) %}{% if a == b %}is-active{% endif %}{% endfunc %}

{% func (p *ChannelPage) Sidebar(item string) %}
<div class="is-sidebar-menu is-hidden-mobile">
    <aside class="menu">
        <p class="menu-label">
            General
        </p>
        <ul class="menu-list">
            <li><a href="/c/{%u p.Channel.Name %}" class='{%= isActive(item, "overview") %}'>Overview</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/commands" class='{%= isActive(item, "commands") %}'>Commands</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/quotes" class='{%= isActive(item, "quotes") %}'>Quotes</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/lists" class='{%= isActive(item, "lists") %}'>Lists</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/autoreplies" class='{%= isActive(item, "autoreplies") %}'>Autoreplies</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/scheduled" class='{%= isActive(item, "scheduled") %}'>Repeated / scheduled</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/variables" class='{%= isActive(item, "variables") %}'>Variables</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/highlights" class='{%= isActive(item, "highlights") %}'>Highlights</a></li>
        </ul>
        <p class="menu-label">
            Settings
        </p>
        <ul class="menu-list">
            <li><a href="/c/{%u p.Channel.Name %}/regulars" class='{%= isActive(item, "regulars") %}'>Regulars</a></li>
            <li><a href="/c/{%u p.Channel.Name %}/chatrules" class='{%= isActive(item, "chatrules") %}'>Chat rules</a></li>
        </ul>
    </aside>
</div>
{% endfunc %}

{% func (p *ChannelPage) SidebarMobile(item string) %}
<nav class="navbar is-hidden-tablet is-info" role="navigation" aria-label="main navigation">
    <div class="navbar-brand">
        <p class="navbar-item">Menu</p>
        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="sidebarNav">
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>

    <div id="sidebarNav" class="navbar-menu">
        <div class="navbar-start">
            <div class="navbar-item has-dropdown is-hoverable">
                <p class="navbar-link">General</p>

                <div class="navbar-dropdown">
                    <a href="/c/{%u p.Channel.Name %}" class='navbar-item {%= isActive(item, "overview") %}'>Overview</a>
                    <a href="/c/{%u p.Channel.Name %}/commands" class='navbar-item {%= isActive(item, "commands") %}'>Commands</a>
                    <a href="/c/{%u p.Channel.Name %}/quotes" class='navbar-item {%= isActive(item, "quotes") %}'>Quotes</a>
                    <a href="/c/{%u p.Channel.Name %}/lists" class='navbar-item {%= isActive(item, "lists") %}'>Lists</a>
                    <a href="/c/{%u p.Channel.Name %}/autoreplies" class='navbar-item {%= isActive(item, "autoreplies") %}'>Autoreplies</a>
                    <a href="/c/{%u p.Channel.Name %}/scheduled" class='navbar-item {%= isActive(item, "scheduled") %}'>Repeated / scheduled</a>
                    <a href="/c/{%u p.Channel.Name %}/variables" class='{%= isActive(item, "variables") %}'>Variables</a>
                    <a href="/c/{%u p.Channel.Name %}/highlights" class='{%= isActive(item, "highlights") %}'>Highlights</a>
                </div>
            </div>

            <div class="navbar-item has-dropdown is-hoverable">
                <p class="navbar-link">Settings</a>

                <div class="navbar-dropdown">
                    <a href="/c/{%u p.Channel.Name %}/regulars" class='navbar-item {%= isActive(item, "regulars") %}'>Regulars</a>
                    <a href="/c/{%u p.Channel.Name %}/chatrules" class='navbar-item {%= isActive(item, "chatrules") %}'>Chat rules</a>
                </div>
            </div>
        </div>
    </div>
</nav>
{% endfunc %}


{% func (p *ChannelPage) PageBody() %}
{%= p.SidebarMobile("overview") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("overview") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span>
        <hr>

        <a class="button is-outlined" href="https://www.twitch.tv/{%u p.Channel.Name %}" target="_blank">
            <span class="icon"><i class="fab fa-twitch"></i></span>
            <span>Twitch</span>
        </a>

        {% if p.Channel.LastFM != "" %}
            <a class="button is-outlined" href="https://www.last.fm/user/{%u p.Channel.LastFM %}" target="_blank">
                <span class="icon"><i class="fab fa-lastfm"></i></span>
                <span>LastFM</span>
            </a>
        {% endif %}

        {% if p.Channel.SteamID != "" %}
            <a class="button is-outlined" href="https://steamcommunity.com/profiles/{%u p.Channel.SteamID %}" target="_blank">
                <span class="icon"><i class="fab fa-steam"></i></span>
                <span>Steam</span>
            </a>
        {% endif %}

        {% if p.Channel.ExtraLifeID != 0 %}
            <a class="button is-outlined" href="https://www.extra-life.org/index.cfm?fuseaction=donorDrive.participant&participantID={%d p.Channel.ExtraLifeID %}" target="_blank">
                <span class="icon"><i class="fas fa-gamepad"></i></span>
                <span>Extra-Life</span>
            </a>
        {% endif %}

        <br>
        <br>

        <p><b>Bot name:</b> <code>{%s p.Channel.BotName %}</code></p>
        <p><b>Command prefix:</b> <code>{%s p.Channel.Prefix %}</code></p>
    </div>
</div>

<script>
var hash = window.location.hash;
var realPage = window.location.origin + window.location.pathname;
if (hash) {
    if (hash == "#overview") {
        history.replaceState(null, null, ' ');
    } else {
        var redirect = {
            "#commands": "commands",
            "#quotes": "quotes",
            "#autoreplies": "autoreplies",
            "#scheduled": "scheduled",
            "#regulars": "regulars",
            "#chatrules": "chatrules",
        }[hash];

        window.location.href = realPage + "/" + redirect;
    }
}
</script>
{% endfunc %}

{% code
type ChannelCommandsPage struct {
    ChannelPage
    Commands models.CustomCommandSlice
}
%}

{% func accessLevel(level string) %}
{% switch level %}
{% case models.AccessLevelEveryone %}
All
{% case models.AccessLevelSubscriber %}
<span class="has-text-info">Subs</span>
{% case models.AccessLevelModerator %}
<span class="has-text-success">Mods</span>
{% case models.AccessLevelBroadcaster %}
<span class="has-text-danger">Broadcaster</span>
{% case models.AccessLevelAdmin %}
<span>Admins</span>
{% default %}
Unknown
{% endswitch %}
{% endfunc %}

{% func convertCommand(s string) %}{% stripspace %}
{% code
    c, _ := cbp.Parse(s)
%}
{% for _, node := range c %}
{% if node.Text != "" %}
{%s node.Text %}
{% else %}
<code>
(_{%s cbp.NodesString(node.Children) %}_)
</code>
{% endif %}
{% endfor %}
{% endstripspace %}{% endfunc %}

{% func (p *ChannelCommandsPage) PageBody() %}
{%= p.SidebarMobile("commands") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("commands") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Commands</span>
        <hr>

        {% if len(p.Commands) == 0 %}
        <p>No commands.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="command"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="command">Command</th>
                    <th data-sortable="true">Access</th>
                    <th data-sortable="true">Response</th>
                    <th data-sortable="true">Count</th>
                    <th data-sortable="true">Editor</th>
                    <th data-sortable="true" data-formatter="timeFormatter" data-sorter="timeSorter">Edited</th>
                </tr>
            </thead>
            <tbody>
                {% for _, c := range p.Commands %}
                <tr>
                    <td><code>{%s p.Channel.Prefix %}{%s c.R.CommandInfo.Name %}</code></td>
                    <td>{%= accessLevel(c.R.CommandInfo.AccessLevel) %}</td>
                    <td>{%s= convertCommand(c.Message) %}</td>
                    <td>{%v c.R.CommandInfo.Count %}</td>
                    <td>{%s c.R.CommandInfo.Editor %}</td>
                    <td>{%s c.UpdatedAt.Format(time.RFC3339) %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</div>
{% endfunc %}

{% code
type ChannelQuotesPage struct {
    ChannelPage
    Quotes models.QuoteSlice
}
%}

{% func (p *ChannelQuotesPage) PageBody() %}
{%= p.SidebarMobile("quotes") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("quotes") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Quotes</span>
        <hr>

        {% if len(p.Quotes) == 0 %}
        <p>No quotes.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="number"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="number">#</th>
                    <th data-sortable="true">Quote</th>
                    <th data-sortable="true">Editor</th>
                    <th data-sortable="true" data-formatter="timeFormatter" data-sorter="timeSorter">Edited</th>
                </tr>
            </thead>
            <tbody>
                {% for _, q := range p.Quotes %}
                <tr>
                    <td>{%d q.Num %}</td>
                    <td>{%s q.Quote %}</td>
                    <td>{%s q.Editor %}</td>
                    <td>{%s q.UpdatedAt.Format(time.RFC3339) %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</div>
{% endfunc %}


{% code
type ChannelAutorepliesPage struct {
    ChannelPage
    Autoreplies models.AutoreplySlice
}
%}

{% func (p *ChannelAutorepliesPage) PageBody() %}
{%= p.SidebarMobile("autoreplies") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("autoreplies") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Autoreplies</span>
        <hr>

        {% if len(p.Autoreplies) == 0 %}
        <p>No autoreplies.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="number"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="number">#</th>
                    <th data-sortable="true">Trigger</th>
                    <th data-sortable="true">Regex</th>
                    <th data-sortable="true">Response</th>
                    <th data-sortable="true">Count</th>
                    <th data-sortable="true">Editor</th>
                    <th data-sortable="true" data-formatter="timeFormatter" data-sorter="timeSorter">Edited</th>
                </tr>
            </thead>
            <tbody>
                {% for _, a := range p.Autoreplies %}
                <tr>
                    <td>{%d a.Num %}</td>
                    <td><code>{%s a.OrigPattern.String %}</code></td>
                    <td><code>{%s a.Trigger %}</code></td>
                    <td>{%s= convertCommand(a.Response) %}</td>
                    <td>{%d a.Count %}</td>
                    <td>{%s a.Editor %}</td>
                    <td>{%s a.UpdatedAt.Format(time.RFC3339) %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}

    </div>
</div>
{% endfunc %}


{% code
type ChannelListsPage struct {
    ChannelPage
    Lists models.CommandListSlice
}
%}

{% func (p *ChannelListsPage) PageBody() %}
{%= p.SidebarMobile("lists") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("lists") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Lists</span>
        <hr>

        {% if len(p.Lists) == 0 %}
        <p>No lists.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="command"
            data-search="true"
            data-sortable="true"
            data-detail-view="true"
            data-detail-formatter="detailFormatter"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="command">Command</th>
                    <th data-sortable="true">Access</th>
                    <th data-sortable="true">Count</th>
                    <th data-sortable="true">Editor</th>
                    <th data-sortable="true" data-formatter="timeFormatter" data-sorter="timeSorter">Edited</th>
                </tr>
            </thead>
            <tbody>
                {% for _, l := range p.Lists %}
                <tr data-has-detail-view="true">
                    <td><code>{%s p.Channel.Prefix %}{%s l.R.CommandInfo.Name %}</code></td>
                    <td>{%= accessLevel(l.R.CommandInfo.AccessLevel) %}</td>
                    <td>{%v l.R.CommandInfo.Count %}</td>
                    <td>{%s l.R.CommandInfo.Editor %}</td>
                    <td>{%s l.UpdatedAt.Format(time.RFC3339) %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</div>
{% endfunc %}


{% func (p *ChannelListsPage) PageScripts() %}
{%= p.ChannelPage.PageScripts() %}
<script>
{% stripspace %}
var all = [
{% for i, l := range p.Lists %}
    {% if i != 0 %},{% endif %}
    [
        {% for j, item := range l.Items %}
            {% if j != 0 %},{% endif %}
            {%q= item %}
        {% endfor %}
    ]
{% endfor %}
];
{% endstripspace %}

function detailFormatter(index, row) {
    var html = ["<p><ol>"];

    var items = all[index];

    if (items.length == 0) {
        return "<p>No items.</p>"
    }

    for (var i = 0; i < items.length; i++) {
        html.push("<li>");
        var div = document.createElement("div");
        div.innerText = items[i];
        html.push(div.innerHTML);
        html.push("</li>");
    }

    html.push("</ol></p>")

    return html.join("");
}
</script>
{% endfunc %}


{% code
type ChannelRegularsPage struct {
    ChannelPage
}
%}

{% func (p *ChannelRegularsPage) PageBody() %}
{%= p.SidebarMobile("regulars") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("regulars") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Regulars</span>
        <hr>

        {% if len(p.Channel.CustomRegulars) == 0 %}
        <p>No regulars.</p>
        {% else %}
        <p>The following users are considered regulars in chat:</p>
        <ul>
            {% for _, reg := range p.Channel.CustomRegulars %}
            <li>{%s reg %}</li>
            {% endfor %}
        </ul>
        {% endif %}
    </div>
</div>
{% endfunc %}


{% code
type ChannelRulesPage struct {
    ChannelPage
}
%}

{% func (p *ChannelRulesPage) PageBody() %}
{%= p.SidebarMobile("chatrules") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("chatrules") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Chat rules</span>
        <hr>

        <h2>Allowed URLs</h2>

        {% if len(p.Channel.PermittedLinks) == 0 %}
        <p>No allowed URLs.</p>
        {% else %}
        <p>The following URL patterns are allowed:</p>
        <ul>
            {% for _, link := range p.Channel.PermittedLinks %}
            <li><code>{%s link %}</code></li>
            {% endfor %}
        </ul>
        {% endif %}

        <h2>Banned phrases</h2>
        {% if len(p.Channel.FilterBannedPhrasesPatterns) == 0 %}
        <p>No banned phrases.</p>
        {% else %}
        <p>The following phrases are banned:</p>
        <ul>
            {% for _, p := range p.Channel.FilterBannedPhrasesPatterns %}
            <li><code>{%s p %}</code></li>
            {% endfor %}
        </ul>
        {% endif %}
    </div>
</div>
{% endfunc %}


{% code
type ChannelScheduledPage struct {
    ChannelPage
    Repeated models.RepeatedCommandSlice
    Scheduled models.ScheduledCommandSlice
}
%}

{% func yesNo(b bool) %}
{% if b %}
<span class="has-text-success">Yes</span>
{% else %}
<span class="has-text-danger">No</span>
{% endif %}
{% endfunc %}

{% func (p *ChannelScheduledPage) PageBody() %}
{%= p.SidebarMobile("scheduled") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("scheduled") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Repeated / scheduled commands</span>
        <hr>

        <h2>Repeated commands</h2>

        {% if len(p.Repeated) == 0 %}
        <p>No repeated commands.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="enabled"
            data-sort-order="desc"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true">Command</th>
                    <th data-sortable="true" data-field="enabled">Enabled</th>
                    <th data-sortable="true">Interval</th>
                    <th data-sortable="true">Message diff</th>
                </tr>
            </thead>
            <tbody>
                {% for _, c := range p.Repeated %}
                <tr>
                    <td><code>{%s p.Channel.Prefix %}{%s c.R.CommandInfo.Name %}</code></td>
                    <td>{%= yesNo(c.Enabled) %}</td>
                    <td>Every {%s durafmt.Parse(time.Duration(c.Delay) * time.Second).String() %}</td>
                    <td>{%v c.MessageDiff %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}

        <h2>Scheduled commands</h2>

        {% if len(p.Scheduled) == 0 %}
        <p>No scheduled commands.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="enabled"
            data-sort-order="desc"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true">Command</th>
                    <th data-sortable="true" data-field="enabled">Enabled</th>
                    <th data-sortable="true">Cron expression</th>
                    <th data-sortable="true">Message diff</th>
                </tr>
            </thead>
            <tbody>
                {% for _, c := range p.Scheduled %}
                <tr>
                    <td><code>{%s p.Channel.Prefix %}{%s c.R.CommandInfo.Name %}</code></td>
                    <td>{%= yesNo(c.Enabled) %}</td>
                    <td><code>{%s c.CronExpression %}</code></td>
                    <td>{%v c.MessageDiff %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</div>
{% endfunc %}

{% code
type ChannelVariablesPage struct {
    ChannelPage
    Variables models.VariableSlice
}
%}

{% func (p *ChannelVariablesPage) PageBody() %}
{%= p.SidebarMobile("variables") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("variables") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Variables</span>
        <hr>

        {% if len(p.Variables) == 0 %}
        <p>No variables.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="name"
            data-sort-order="asc"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="name">Name</th>
                    <th data-sortable="true">Value</th>
                </tr>
            </thead>
            <tbody>
                {% for _, v := range p.Variables %}
                <tr>
                    <td>{%s v.Name %}</td>
                    <td>{%s v.Value %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</div>
{% endfunc %}

{% code
type ChannelHighlightsPage struct {
    ChannelPage
    Highlights models.HighlightSlice
}
%}

{% func (p *ChannelHighlightsPage) PageBody() %}
{%= p.SidebarMobile("highlights") %}
<div class="columns is-fullheight is-clipped">
    {%= p.Sidebar("highlights") %}

    <div class="column is-main-content content">
        <span class="title is-1">{%s displayNameFor(p.Channel) %}</span><span class="subtitle is-3">Highlights</span>
        <hr>

        {% if len(p.Highlights) == 0 %}
        <p>No highlights.</p>
        {% else %}
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="created_at"
            data-sort-order="desc"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="created_at" data-formatter="timeFormatter" data-sorter="timeSorter">Created at</th>
                    <th data-sortable="true">Timestamp</th>
                    <th data-sortable="true">Status</th>
                    <th data-sortable="true">Game</th>
                </tr>
            </thead>
            <tbody>
                {% for _, h := range p.Highlights %}
                <tr>
                    <td>{%s h.HighlightedAt.Format(time.RFC3339) %}</td>
                    <td>{% stripspace %}
                        {% if h.StartedAt.Valid %}
                        {%s durafmt.Parse(h.HighlightedAt.Sub(h.StartedAt.Time).Truncate(time.Second)).String() %}
                        {% endif %}
                        {% endstripspace %}</td>
                    <td>{%s h.Status %}</td>
                    <td>{%s h.Game %}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% endif %}
    </div>
</div>
{% endfunc %}

