// Code generated by qtc from "channel.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	"github.com/hortbot/hortbot/internal/db/models"

	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type ChannelPage struct {
	BasePage
	Channel *models.Channel
}

func (p *ChannelPage) StreamPageTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
HortBot - `)
	qw422016.E().S(p.Channel.Name)
	qw422016.N().S(`
`)
}

func (p *ChannelPage) WritePageTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) PageTitle() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *ChannelPage) StreamPageMeta(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<style>
html {
    overflow-y: hidden;
}

.is-sidebar-menu {
    padding: 2.5rem;
    background: #444444;
    width: 20em;
    overflow-y: auto;
    border-right: 1px solid #777777;
    margin-top: 0.75rem;
}

.columns.is-fullheight {
    min-height: calc(100vh - ( 4rem - .75rem ) );
    max-height: calc(100vh - ( 4rem - .75rem ) );
    height: calc(100vh - ( 4rem - .75rem ) );
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    margin-bottom: 0;
}
.columns.is-fullheight .column {
    overflow-y: auto;
}

.is-main-content {
    margin-top: 0.75rem;
    margin-right: 0.75rem;
}
</style>
`)
}

func (p *ChannelPage) WritePageMeta(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageMeta(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) PageMeta() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageMeta(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamisActive(qw422016 *qt422016.Writer, a, b string) {
	if a == b {
		qw422016.N().S(`is-active`)
	}
}

func writeisActive(qq422016 qtio422016.Writer, a, b string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamisActive(qw422016, a, b)
	qt422016.ReleaseWriter(qw422016)
}

func isActive(a, b string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeisActive(qb422016, a, b)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *ChannelPage) StreamSidebar(qw422016 *qt422016.Writer, item string) {
	qw422016.N().S(`
<div class="is-sidebar-menu">
    <aside class="menu">
        <p class="menu-label">
            General
        </p>
        <ul class="menu-list">
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/commands" class='`)
	streamisActive(qw422016, item, "commands")
	qw422016.N().S(`'>Commands</a></li>
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/quotes" class='`)
	streamisActive(qw422016, item, "quotes")
	qw422016.N().S(`'>Quotes</a></li>
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/lists" class='`)
	streamisActive(qw422016, item, "lists")
	qw422016.N().S(`'>Lists</a></li>
        </ul>
        <p class="menu-label">
            Settings
        </p>
        <ul class="menu-list">
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/regulars" class='`)
	streamisActive(qw422016, item, "regulars")
	qw422016.N().S(`'>Regulars</a></li>
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/rules" class='`)
	streamisActive(qw422016, item, "rules")
	qw422016.N().S(`'>Chat rules</a></li>
        </ul>
    </aside>
</div>
`)
}

func (p *ChannelPage) WriteSidebar(qq422016 qtio422016.Writer, item string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamSidebar(qw422016, item)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) Sidebar(item string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteSidebar(qb422016, item)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

type ChannelCommandsPage struct {
	ChannelPage
}

func (p *ChannelCommandsPage) StreamPageBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="columns is-fullheight" style="overflow: hidden;">
    `)
	p.StreamSidebar(qw422016, "commands")
	qw422016.N().S(`

    <div class="column is-main-content">

    </div>
</div>

`)
}

func (p *ChannelCommandsPage) WritePageBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelCommandsPage) PageBody() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
