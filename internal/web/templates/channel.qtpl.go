// Code generated by qtc from "channel.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	"github.com/hortbot/hortbot/internal/db/models"

	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type ChannelPage struct {
	BasePage
	Channel *models.Channel
}

func (p *ChannelPage) StreamPageTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
HortBot - `)
	qw422016.E().S(p.Channel.Name)
	qw422016.N().S(`
`)
}

func (p *ChannelPage) WritePageTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) PageTitle() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *ChannelPage) StreamPageMeta(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<style>
html {
    overflow-y: hidden;
}

.is-sidebar-menu {
    padding: 2.5rem;
    background: #444444;
    width: 20em;
    overflow-y: auto;
    border-right: 1px solid #777777;
    margin-top: 0.75rem;
}

.columns.is-fullheight {
    min-height: calc(100vh - ( 4rem - .75rem ) );
    max-height: calc(100vh - ( 4rem - .75rem ) );
    height: calc(100vh - ( 4rem - .75rem ) );
    display: flex;
    flex-direction: row;
    justify-content: stretch;
    margin-bottom: 0;
}
.columns.is-fullheight .column {
    overflow-y: auto;
}

.is-main-content {
    margin-top: 0.75rem;
    margin-right: 0.75rem;
    padding: 2.5rem;
}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.15.4/themes/bulma/bootstrap-table-bulma.min.css" integrity="sha256-wIjzFXsKHqI7xqvY3UliCZv3gdzpBjZO7CX1M9zpVgk=" crossorigin="anonymous" />
`)
}

func (p *ChannelPage) WritePageMeta(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageMeta(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) PageMeta() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageMeta(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *ChannelPage) StreamPageScripts(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.slim.min.js" integrity="sha256-pasqAKBDmFT4eHoN2ndd6lN370kFiGUFyTiUHWhU7k8=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.15.4/bootstrap-table.min.js" integrity="sha256-zuYwDcub7myT0FRW3/WZI7JefCjyTmBJIoCS7Rb9xQc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.15.4/themes/bulma/bootstrap-table-bulma.min.js" integrity="sha256-PqveQNlS1aBG/1ezXZfG6a095GB17CSjcC6N+J1+ej8=" crossorigin="anonymous"></script>
`)
}

func (p *ChannelPage) WritePageScripts(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageScripts(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) PageScripts() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageScripts(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func streamisActive(qw422016 *qt422016.Writer, a, b string) {
	if a == b {
		qw422016.N().S(`is-active`)
	}
}

func writeisActive(qq422016 qtio422016.Writer, a, b string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	streamisActive(qw422016, a, b)
	qt422016.ReleaseWriter(qw422016)
}

func isActive(a, b string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	writeisActive(qb422016, a, b)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *ChannelPage) StreamSidebar(qw422016 *qt422016.Writer, item string) {
	qw422016.N().S(`
<div class="is-sidebar-menu">
    <aside class="menu">
        <p class="menu-label">
            General
        </p>
        <ul class="menu-list">
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/commands" class='`)
	streamisActive(qw422016, item, "commands")
	qw422016.N().S(`'>Commands</a></li>
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/quotes" class='`)
	streamisActive(qw422016, item, "quotes")
	qw422016.N().S(`'>Quotes</a></li>
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/lists" class='`)
	streamisActive(qw422016, item, "lists")
	qw422016.N().S(`'>Lists</a></li>
        </ul>
        <p class="menu-label">
            Settings
        </p>
        <ul class="menu-list">
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/regulars" class='`)
	streamisActive(qw422016, item, "regulars")
	qw422016.N().S(`'>Regulars</a></li>
            <li><a href="/c/`)
	qw422016.N().U(p.Channel.Name)
	qw422016.N().S(`/rules" class='`)
	streamisActive(qw422016, item, "rules")
	qw422016.N().S(`'>Chat rules</a></li>
        </ul>
    </aside>
</div>
`)
}

func (p *ChannelPage) WriteSidebar(qq422016 qtio422016.Writer, item string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamSidebar(qw422016, item)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelPage) Sidebar(item string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteSidebar(qb422016, item)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

type ChannelCommandsPage struct {
	ChannelPage
	Commands models.CustomCommandSlice
}

func (p *ChannelCommandsPage) StreamPageBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="columns is-fullheight" style="overflow: hidden;">
    `)
	p.StreamSidebar(qw422016, "commands")
	qw422016.N().S(`

    <div class="column is-main-content">
        <span class="title is-1">`)
	qw422016.E().S(p.Channel.Name)
	qw422016.N().S(`</span><span class="subtitle is-3" style="padding-left: 1rem">Commands</span>
        <hr>

        `)
	if len(p.Commands) == 0 {
		qw422016.N().S(`
        <h2>No commands.</h2>
        `)
	} else {
		qw422016.N().S(`
        <table
            class="table is-striped is-hoverable is-fullwidth"
            data-toggle="table"
            data-sort-class="table-active"
            data-sort-name="command"
            data-search="true"
            data-sortable="true"
        >
            <thead>
                <tr>
                    <th data-sortable="true" data-field="command">Command</th>
                    <th data-sortable="true">Access</th>
                    <th data-sortable="true">Response</th>
                    <th data-sortable="true">Count</th>
                    <th data-sortable="true">Editor</th>
                    <th data-sortable="true">Edited</th>
                </tr>
            </thead>
            <tbody>
                `)
		for _, c := range p.Commands {
			qw422016.N().S(`
                <tr>
                    <th><code class="has-text-light">`)
			qw422016.E().S(p.Channel.Prefix)
			qw422016.E().S(c.R.CommandInfo.Name)
			qw422016.N().S(`</code></th>
                    <th>Subs</th>
                    <th>`)
			qw422016.E().S(c.Message)
			qw422016.N().S(`</th>
                    <th>`)
			qw422016.E().V(c.R.CommandInfo.Count)
			qw422016.N().S(`</th>
                    <th>`)
			qw422016.E().S(c.R.CommandInfo.Editor)
			qw422016.N().S(`</th>
                    <th>`)
			qw422016.E().V(c.UpdatedAt)
			qw422016.N().S(`</th>
                </tr>
                `)
		}
		qw422016.N().S(`
            </tbody>
        </table>
        `)
	}
	qw422016.N().S(`

    </div>
</div>

`)
}

func (p *ChannelCommandsPage) WritePageBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *ChannelCommandsPage) PageBody() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
