// Code generated by qtc from "login.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type LoginPage struct {
	BasePage
}

func (p *LoginPage) StreamPageTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
`)
	p.StreamPageBrand(qw422016)
	qw422016.N().S(` - Log in
`)
}

func (p *LoginPage) WritePageTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *LoginPage) PageTitle() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *LoginPage) StreamPageBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<section class="section">
    <div class="container content">
        <h1 class="title has-text-centered">
            Log in
        </h1>

        <div class="columns">
            <div class="column is-8 is-offset-2 has-text-centered">
                <p>
                    The full site is still a work in progress, but for now,
                    you can authorize the bot to access your Twitch account
                    by clicking here:
                </p>
                <a class="button is-large is-info is-focused" href="/auth/twitch">
                    <span class="icon is-small"><i class="fab fa-twitch"></i></span>
                    <span>Log in with Twitch</span>
                </a>
            </div>
        </div>
    </div>
</section>
`)
}

func (p *LoginPage) WritePageBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *LoginPage) PageBody() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

type LoginSuccessPage struct {
	BasePage
	Name string
	ID   int64
	Bot  bool
}

func (p *LoginSuccessPage) StreamPageTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
`)
	p.StreamPageBrand(qw422016)
	qw422016.N().S(` - Log in - Success!
`)
}

func (p *LoginSuccessPage) WritePageTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *LoginSuccessPage) PageTitle() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *LoginSuccessPage) StreamPageBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<section class="section">
    <div class="container content">
        <h1 class="title has-text-centered">
            Success!
        </h1>

        <div class="columns">
            <div class="column is-8 is-offset-2 has-text-centered">
                <p>
                    The bot is now authorized to access your Twitch account.
                </p>

                <p>
                    `)
	qw422016.E().S(p.Name)
	qw422016.N().S(` (`)
	qw422016.E().V(p.ID)
	qw422016.N().S(`)`)
	if p.Bot {
		qw422016.N().S(` as bot`)
	}
	qw422016.N().S(`
                </p>
            </div>
        </div>
    </div>
</section>
`)
}

func (p *LoginSuccessPage) WritePageBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamPageBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *LoginSuccessPage) PageBody() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WritePageBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamMetaRedirect(qw422016 *qt422016.Writer, url string) {
	qw422016.N().S(`
<!DOCTYPE html>
<html>
	<head>
        <style>
            html {
                background-color: #1f2424;
            }
        </style>
	    <meta http-equiv="Refresh" content="0; url=`)
	qw422016.E().S(url)
	qw422016.N().S(`" />
	</head>
	<body></body>
</html>
`)
}

func WriteMetaRedirect(qq422016 qtio422016.Writer, url string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamMetaRedirect(qw422016, url)
	qt422016.ReleaseWriter(qw422016)
}

func MetaRedirect(url string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteMetaRedirect(qb422016, url)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
